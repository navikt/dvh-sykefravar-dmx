{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.6", "generated_at": "2022-05-02T14:27:25.105962Z", "invocation_id": "7a9fc4ee-57dc-4f0f-ac5e-6ae93b810bd4", "env": {}, "project_id": "add7e0433209c209e4016795d940dfca", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "oracle"}, "nodes": {"model.dmx_poc.stg_dim_naering": {"raw_sql": "WITH source_dim_naering AS (\r\n  SELECT * FROM {{ source('dmx_pox_oppfolging', 'DIM_NAERING') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT * FROM source_dim_naering\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dmx_pox_oppfolging.DIM_NAERING"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "forkammer", "dim", "stg_dim_naering"], "unique_id": "model.dmx_poc.stg_dim_naering", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\forkammer\\dim\\stg_dim_naering.sql", "original_file_path": "models\\dvh_syfo\\forkammer\\dim\\stg_dim_naering.sql", "name": "stg_dim_naering", "alias": "stg_dim_naering", "checksum": {"name": "sha256", "checksum": "9c4e050479b685705484fd2a97226c62004479be1de61b36cb81ffee6a73eec3"}, "tags": ["syfo"], "refs": [], "sources": [["dmx_pox_oppfolging", "DIM_NAERING"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\forkammer\\dim\\stg_dim_naering.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.476695, "compiled_sql": "WITH source_dim_naering AS (\n  SELECT * FROM DT_P.DIM_NAERING\n),\n\nfinal AS (\n  SELECT * FROM source_dim_naering\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.stg_dim_naering"}, "model.dmx_poc.stg_dim_organisasjon": {"raw_sql": "WITH source_dim_organisasjon AS (\r\n  SELECT * FROM {{ source('dmx_pox_oppfolging', 'DIM_ORG') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT * FROM source_dim_organisasjon\r\n)\r\n\r\nSELECT * FROM final\r\n\r\n/*\r\ndette er en tekst dette er en test\r\n*/\r\n\r\n/* da er vi alle koblet sammen\r\nja!\r\n\r\n*/", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dmx_pox_oppfolging.DIM_ORG"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "forkammer", "dim", "stg_dim_organisasjon"], "unique_id": "model.dmx_poc.stg_dim_organisasjon", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\forkammer\\dim\\stg_dim_organisasjon.sql", "original_file_path": "models\\dvh_syfo\\forkammer\\dim\\stg_dim_organisasjon.sql", "name": "stg_dim_organisasjon", "alias": "stg_dim_organisasjon", "checksum": {"name": "sha256", "checksum": "84873bacb877b3b2e86cf418898b23b705dd63a2568b340734413c1fc20adcf4"}, "tags": ["syfo"], "refs": [], "sources": [["dmx_pox_oppfolging", "DIM_ORG"]], "description": "Oversikt over organisasjonen", "columns": {"ek_org_node": {"name": "ek_org_node", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\forkammer\\dim\\stg_dim_organisasjon.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5892785, "compiled_sql": "WITH source_dim_organisasjon AS (\n  SELECT * FROM DT_P.DIM_ORG\n),\n\nfinal AS (\n  SELECT * FROM source_dim_organisasjon\n)\n\nSELECT * FROM final\n\n/*\ndette er en tekst dette er en test\n*/\n\n/* da er vi alle koblet sammen\nja!\n\n*/", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.stg_dim_organisasjon"}, "model.dmx_poc.stg_dim_person1": {"raw_sql": "WITH source_dim_person1 AS (\r\n  SELECT * FROM {{ source('dmx_poc_person', 'DIM_PERSON1') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT * FROM source_dim_person1\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dmx_poc_person.DIM_PERSON1"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "forkammer", "dim", "stg_dim_person1"], "unique_id": "model.dmx_poc.stg_dim_person1", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\forkammer\\dim\\stg_dim_person1.sql", "original_file_path": "models\\dvh_syfo\\forkammer\\dim\\stg_dim_person1.sql", "name": "stg_dim_person1", "alias": "stg_dim_person1", "checksum": {"name": "sha256", "checksum": "fb5670fffa01d3679e968b4d467f1168fde9ebaa75631e6e72514b84e0f6f433"}, "tags": ["syfo"], "refs": [], "sources": [["dmx_poc_person", "DIM_PERSON1"]], "description": "Persondimenjsons", "columns": {"pk_dim_person": {"name": "pk_dim_person", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\forkammer\\dim\\stg_dim_person1.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5892785, "compiled_sql": "WITH source_dim_person1 AS (\n  SELECT * FROM DT_PERSON.DIM_PERSON1\n),\n\nfinal AS (\n  SELECT * FROM source_dim_person1\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.stg_dim_person1"}, "model.dmx_poc.stg_dim_tid": {"raw_sql": "WITH source_dim_tid AS (\r\n  SELECT * FROM {{ source('dmx_pox_oppfolging', 'DIM_TID') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT * FROM source_dim_tid\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dmx_pox_oppfolging.DIM_TID"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "forkammer", "dim", "stg_dim_tid"], "unique_id": "model.dmx_poc.stg_dim_tid", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\forkammer\\dim\\stg_dim_tid.sql", "original_file_path": "models\\dvh_syfo\\forkammer\\dim\\stg_dim_tid.sql", "name": "stg_dim_tid", "alias": "stg_dim_tid", "checksum": {"name": "sha256", "checksum": "edec68a41f3f1f2175729b91ea9e02267793ded9af66d2a3d5d9f5ae63bfe095"}, "tags": ["syfo"], "refs": [], "sources": [["dmx_pox_oppfolging", "DIM_TID"]], "description": "Tidsdimensjonen", "columns": {"pk_dim_tid": {"name": "pk_dim_tid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\forkammer\\dim\\stg_dim_tid.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5892785, "compiled_sql": "WITH source_dim_tid AS (\n  SELECT * FROM DT_P.DIM_TID\n),\n\nfinal AS (\n  SELECT * FROM source_dim_tid\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.stg_dim_tid"}, "model.dmx_poc.stg_dim_varighet": {"raw_sql": "WITH source_dim_varighet AS (\r\n  SELECT * FROM {{ source('dmx_pox_oppfolging', 'DIM_VARIGHET') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT * FROM source_dim_varighet\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dmx_pox_oppfolging.DIM_VARIGHET"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "forkammer", "dim", "stg_dim_varighet"], "unique_id": "model.dmx_poc.stg_dim_varighet", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\forkammer\\dim\\stg_dim_varighet.sql", "original_file_path": "models\\dvh_syfo\\forkammer\\dim\\stg_dim_varighet.sql", "name": "stg_dim_varighet", "alias": "stg_dim_varighet", "checksum": {"name": "sha256", "checksum": "a3350e7629143b271cec8b10dd534fc9561432efd7fc4d66a261de40d26979e6"}, "tags": ["syfo"], "refs": [], "sources": [["dmx_pox_oppfolging", "DIM_VARIGHET"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\forkammer\\dim\\stg_dim_varighet.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5011632, "compiled_sql": "WITH source_dim_varighet AS (\n  SELECT * FROM DT_P.DIM_VARIGHET\n),\n\nfinal AS (\n  SELECT * FROM source_dim_varighet\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.stg_dim_varighet"}, "model.dmx_poc.stg_fk_isdialogmote_dm2": {"raw_sql": "WITH source_fs_dialogmote AS (\r\n  SELECT * FROM {{ source('dmx_pox_dialogmote', 'FK_ISDIALOGMOTE_DM2') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT * FROM source_fs_dialogmote\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dmx_pox_dialogmote.FK_ISDIALOGMOTE_DM2"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "forkammer", "modia", "stg_fk_isdialogmote_dm2"], "unique_id": "model.dmx_poc.stg_fk_isdialogmote_dm2", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\forkammer\\modia\\stg_fk_isdialogmote_dm2.sql", "original_file_path": "models\\dvh_syfo\\forkammer\\modia\\stg_fk_isdialogmote_dm2.sql", "name": "stg_fk_isdialogmote_dm2", "alias": "stg_fk_isdialogmote_dm2", "checksum": {"name": "sha256", "checksum": "88c5be3e4898cdf78ae5d242e139f168b03b539e175190cd9bb9a412c40b9384"}, "tags": ["syfo"], "refs": [], "sources": [["dmx_pox_dialogmote", "FK_ISDIALOGMOTE_DM2"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\forkammer\\modia\\stg_fk_isdialogmote_dm2.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5060568, "compiled_sql": "WITH source_fs_dialogmote AS (\n  SELECT * FROM DVH_SYFO.FK_ISDIALOGMOTE_DM2\n),\n\nfinal AS (\n  SELECT * FROM source_fs_dialogmote\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.stg_fk_isdialogmote_dm2"}, "model.dmx_poc.fak_syfo_dialogmote": {"raw_sql": "WITH fak_syfo_dialogmote AS (\r\n  SELECT\r\n    *\r\n  FROM\r\n    {{ ref('fak_syfo_oppfolging_pvt') }}\r\n),\r\n\r\ndim_person1 AS (\r\n  SELECT\r\n    *\r\n  FROM\r\n    {{ ref('stg_dim_person1') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    --id,\r\n    fak_syfo_dialogmote.fk_person1,\r\n    fak_syfo_dialogmote.dialogmote_uuid,\r\n    fak_syfo_dialogmote.nyeste_dialogmote,\r\n    fak_syfo_dialogmote.innkalt,\r\n    fak_syfo_dialogmote.innkalt_tidspunkt,\r\n    fak_syfo_dialogmote.nytt_tid_sted,\r\n    fak_syfo_dialogmote.nytt_tid_sted_tidspunkt,\r\n    fak_syfo_dialogmote.ferdigstilt,\r\n    fak_syfo_dialogmote.ferdigstilt_tidspunkt,\r\n    fak_syfo_dialogmote.avlyst,\r\n    fak_syfo_dialogmote.avlyst_tidspunkt,\r\n    fak_syfo_dialogmote.virksomhetsnr,\r\n    fak_syfo_dialogmote.enhet_nr,\r\n    --nav_ident,\r\n    fak_syfo_dialogmote.nyeste_tilfelle_startdato,\r\n    fak_syfo_dialogmote.arbeidstaker_flagg,\r\n    fak_syfo_dialogmote.arbeidsgiver_flagg,\r\n    --sykmelder_flagg,\r\n    dim_person1.pk_dim_person AS fk_dim_person\r\n  FROM fak_syfo_dialogmote\r\n  LEFT JOIN dim_person1\r\n    ON fak_syfo_dialogmote.fk_person1 = dim_person1.fk_person1\r\n      AND fak_syfo_dialogmote.nyeste_dialogmote\r\n      BETWEEN dim_person1.gyldig_fra_dato\r\n      AND dim_person1.gyldig_til_dato\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.fak_syfo_oppfolging_pvt", "model.dmx_poc.stg_dim_person1"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "kjerne", "fak_syfo_dialogmote"], "unique_id": "model.dmx_poc.fak_syfo_dialogmote", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\kjerne\\fak_syfo_dialogmote.sql", "original_file_path": "models\\dvh_syfo\\kjerne\\fak_syfo_dialogmote.sql", "name": "fak_syfo_dialogmote", "alias": "fak_syfo_dialogmote", "checksum": {"name": "sha256", "checksum": "adebf690ff2c7b0213b7377fe09a39056b23da21eb21df92e86ed12131587d60"}, "tags": ["syfo"], "refs": [["fak_syfo_oppfolging_pvt"], ["stg_dim_person1"]], "sources": [], "description": "fak_syfo_dialogmote", "columns": {"DIALOGMOTE_UUID": {"name": "DIALOGMOTE_UUID", "description": "unique identifikator", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\kjerne\\fak_syfo_dialogmote.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.594173, "compiled_sql": "WITH fak_syfo_dialogmote AS (\n  SELECT\n    *\n  FROM\n    dvh_syfo.fak_syfo_oppfolging_pvt\n),\n\ndim_person1 AS (\n  SELECT\n    *\n  FROM\n    dvh_syfo.stg_dim_person1\n),\n\nfinal AS (\n  SELECT\n    --id,\n    fak_syfo_dialogmote.fk_person1,\n    fak_syfo_dialogmote.dialogmote_uuid,\n    fak_syfo_dialogmote.nyeste_dialogmote,\n    fak_syfo_dialogmote.innkalt,\n    fak_syfo_dialogmote.innkalt_tidspunkt,\n    fak_syfo_dialogmote.nytt_tid_sted,\n    fak_syfo_dialogmote.nytt_tid_sted_tidspunkt,\n    fak_syfo_dialogmote.ferdigstilt,\n    fak_syfo_dialogmote.ferdigstilt_tidspunkt,\n    fak_syfo_dialogmote.avlyst,\n    fak_syfo_dialogmote.avlyst_tidspunkt,\n    fak_syfo_dialogmote.virksomhetsnr,\n    fak_syfo_dialogmote.enhet_nr,\n    --nav_ident,\n    fak_syfo_dialogmote.nyeste_tilfelle_startdato,\n    fak_syfo_dialogmote.arbeidstaker_flagg,\n    fak_syfo_dialogmote.arbeidsgiver_flagg,\n    --sykmelder_flagg,\n    dim_person1.pk_dim_person AS fk_dim_person\n  FROM fak_syfo_dialogmote\n  LEFT JOIN dim_person1\n    ON fak_syfo_dialogmote.fk_person1 = dim_person1.fk_person1\n      AND fak_syfo_dialogmote.nyeste_dialogmote\n      BETWEEN dim_person1.gyldig_fra_dato\n      AND dim_person1.gyldig_til_dato\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.fak_syfo_dialogmote"}, "model.dmx_poc.fak_syfo_dialogmote_org": {"raw_sql": "WITH fak_syfo_dialogmote_org AS (\r\n  SELECT * FROM {{ ref('fak_syfo_dialogmote') }}\r\n),\r\n\r\ndim_org AS (\r\n  SELECT * FROM {{ ref('stg_dim_organisasjon') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    fak_syfo_dialogmote_org.*,\r\n    dim_org.ek_org_node\r\n  FROM fak_syfo_dialogmote_org\r\n  LEFT JOIN dim_org\r\n    ON fak_syfo_dialogmote_org.enhet_nr = dim_org.mapping_node_kode\r\n  WHERE dim_org.mapping_node_type = 'NORGENHET'\r\n    AND fak_syfo_dialogmote_org.nyeste_dialogmote\r\n    BETWEEN dim_org.funk_gyldig_fra_dato\r\n    AND dim_org.funk_gyldig_til_dato\r\n)\r\n\r\nSELECT final.* FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.fak_syfo_dialogmote", "model.dmx_poc.stg_dim_organisasjon"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "kjerne", "fak_syfo_dialogmote_org"], "unique_id": "model.dmx_poc.fak_syfo_dialogmote_org", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\kjerne\\fak_syfo_dialogmote_org.sql", "original_file_path": "models\\dvh_syfo\\kjerne\\fak_syfo_dialogmote_org.sql", "name": "fak_syfo_dialogmote_org", "alias": "fak_syfo_dialogmote_org", "checksum": {"name": "sha256", "checksum": "4706c641a7d1a9d865cbffa6249d1c17d436c0806d98fa238e0b4780ab025fdd"}, "tags": ["syfo"], "refs": [["fak_syfo_dialogmote"], ["stg_dim_organisasjon"]], "sources": [], "description": "fak_syfo_dialogmote_org", "columns": {"DIALOGMOTE_UUID": {"name": "DIALOGMOTE_UUID", "description": "unique identifikator", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\kjerne\\fak_syfo_dialogmote_org.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.594173, "compiled_sql": "WITH fak_syfo_dialogmote_org AS (\n  SELECT * FROM dvh_syfo.fak_syfo_dialogmote\n),\n\ndim_org AS (\n  SELECT * FROM dvh_syfo.stg_dim_organisasjon\n),\n\nfinal AS (\n  SELECT\n    fak_syfo_dialogmote_org.*,\n    dim_org.ek_org_node\n  FROM fak_syfo_dialogmote_org\n  LEFT JOIN dim_org\n    ON fak_syfo_dialogmote_org.enhet_nr = dim_org.mapping_node_kode\n  WHERE dim_org.mapping_node_type = 'NORGENHET'\n    AND fak_syfo_dialogmote_org.nyeste_dialogmote\n    BETWEEN dim_org.funk_gyldig_fra_dato\n    AND dim_org.funk_gyldig_til_dato\n)\n\nSELECT final.* FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.fak_syfo_dialogmote_org"}, "model.dmx_poc.fak_syfo_dialogmote_tid": {"raw_sql": "WITH fak_syfo_dialogmote_tid AS (\r\n  SELECT * FROM {{ ref('fak_syfo_dialogmote_org') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    fak_syfo_dialogmote_tid.*,\r\n    to_number(\r\n      to_char(\r\n        fak_syfo_dialogmote_tid.nyeste_tilfelle_startdato, 'YYYYMMDD'\r\n      )\r\n    ) AS fk_dim_tid_tilfelle_startdato\r\n  FROM fak_syfo_dialogmote_tid\r\n\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.fak_syfo_dialogmote_org"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "kjerne", "fak_syfo_dialogmote_tid"], "unique_id": "model.dmx_poc.fak_syfo_dialogmote_tid", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\kjerne\\fak_syfo_dialogmote_tid.sql", "original_file_path": "models\\dvh_syfo\\kjerne\\fak_syfo_dialogmote_tid.sql", "name": "fak_syfo_dialogmote_tid", "alias": "fak_syfo_dialogmote_tid", "checksum": {"name": "sha256", "checksum": "5e3a7be465f56442f0168baadd2901d3ec076aa55a9f1b7c5c101654f624ede7"}, "tags": ["syfo"], "refs": [["fak_syfo_dialogmote_org"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\kjerne\\fak_syfo_dialogmote_tid.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5158467, "compiled_sql": "WITH fak_syfo_dialogmote_tid AS (\n  SELECT * FROM dvh_syfo.fak_syfo_dialogmote_org\n),\n\nfinal AS (\n  SELECT\n    fak_syfo_dialogmote_tid.*,\n    to_number(\n      to_char(\n        fak_syfo_dialogmote_tid.nyeste_tilfelle_startdato, 'YYYYMMDD'\n      )\n    ) AS fk_dim_tid_tilfelle_startdato\n  FROM fak_syfo_dialogmote_tid\n\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.fak_syfo_dialogmote_tid"}, "model.dmx_poc.fak_syfo_oppfolging_pvt": {"raw_sql": "WITH isdialogmote8 AS (\r\n  SELECT *\r\n  FROM {{ ref('stg_fk_isdialogmote_dm2') }}\r\n),\r\n\r\ninfo_minus_tid AS (\r\n  SELECT * FROM (\r\n    SELECT\r\n      dialogmote_uuid,\r\n      fk_person1,\r\n      status_endring_type,\r\n      virksomhetsnr,\r\n      enhet_nr,\r\n      arbeidstaker_flagg,\r\n      arbeidsgiver_flagg\r\n    FROM\r\n      isdialogmote8\r\n    GROUP BY\r\n      dialogmote_uuid,\r\n      fk_person1,\r\n      status_endring_type,\r\n      virksomhetsnr,\r\n      enhet_nr,\r\n      arbeidstaker_flagg,\r\n      arbeidsgiver_flagg\r\n  )\r\n  PIVOT ( -- noqa\r\n    COUNT(status_endring_type)\r\n    FOR status_endring_type IN (\r\n      'INNKALT' AS innkalt,\r\n      'NYTT_TID_STED' AS nytt_tid_sted,\r\n      'FERDIGSTILT' AS ferdigstilt,\r\n      'AVLYST' AS avlyst\r\n    )\r\n  )\r\n),\r\n\r\nstatus_tidspunkt AS (\r\n  SELECT * FROM (\r\n    SELECT\r\n      dialogmote_uuid,\r\n      status_endring_type,\r\n      status_endring_tidspunkt\r\n    FROM\r\n      isdialogmote8\r\n    GROUP BY\r\n      dialogmote_uuid,\r\n      status_endring_type,\r\n      status_endring_tidspunkt\r\n  )\r\n  PIVOT ( --noqa\r\n    MAX(status_endring_tidspunkt)\r\n    FOR status_endring_type IN (\r\n      'INNKALT' AS innkalt_tidspunkt,\r\n      'NYTT_TID_STED' AS nytt_tid_sted_tidspunkt,\r\n      'FERDIGSTILT' AS ferdigstilt_tidspunkt,\r\n      'AVLYST' AS avlyst_tidspunkt\r\n    )\r\n  )\r\n),\r\n\r\ntid AS (\r\n  SELECT\r\n    dialogmote_uuid,\r\n    max(dialogmote_tidspunkt) AS nyeste_dialogmote,\r\n    max(tilfelle_startdato) AS nyeste_tilfelle_startdato\r\n  FROM\r\n    isdialogmote8\r\n  GROUP BY\r\n    dialogmote_uuid\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    info_minus_tid.dialogmote_uuid,\r\n    info_minus_tid.fk_person1,\r\n    tid.nyeste_dialogmote,\r\n    info_minus_tid.innkalt,\r\n    status_tidspunkt.innkalt_tidspunkt,\r\n    info_minus_tid.nytt_tid_sted,\r\n    status_tidspunkt.nytt_tid_sted_tidspunkt,\r\n    info_minus_tid.ferdigstilt,\r\n    status_tidspunkt.ferdigstilt_tidspunkt,\r\n    info_minus_tid.avlyst,\r\n    status_tidspunkt.avlyst_tidspunkt,\r\n    info_minus_tid.virksomhetsnr,\r\n    info_minus_tid.enhet_nr,\r\n    tid.nyeste_tilfelle_startdato,\r\n    info_minus_tid.arbeidstaker_flagg,\r\n    info_minus_tid.arbeidsgiver_flagg\r\n  FROM\r\n    info_minus_tid\r\n  LEFT JOIN\r\n    status_tidspunkt\r\n    ON info_minus_tid.dialogmote_uuid = status_tidspunkt.dialogmote_uuid\r\n  LEFT JOIN\r\n    tid\r\n    ON info_minus_tid.dialogmote_uuid = tid.dialogmote_uuid\r\n)\r\n\r\nSELECT * FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.stg_fk_isdialogmote_dm2"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "kjerne", "fak_syfo_oppfolging_pvt"], "unique_id": "model.dmx_poc.fak_syfo_oppfolging_pvt", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\kjerne\\fak_syfo_oppfolging_pvt.sql", "original_file_path": "models\\dvh_syfo\\kjerne\\fak_syfo_oppfolging_pvt.sql", "name": "fak_syfo_oppfolging_pvt", "alias": "fak_syfo_oppfolging_pvt", "checksum": {"name": "sha256", "checksum": "d143a33a26b56f37fe39c6f9a6d5aafbe30fbcb28fcbd2ac42cb6f5f6f8f7404"}, "tags": ["syfo"], "refs": [["stg_fk_isdialogmote_dm2"]], "sources": [], "description": "sykefrav\u00e6r_info pivotert", "columns": {"DIALOGMOTE_UUID": {"name": "DIALOGMOTE_UUID", "description": "unique identifikator", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\kjerne\\fak_syfo_oppfolging_pvt.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo"}, "created_at": 1651501624.5892785, "compiled_sql": "WITH isdialogmote8 AS (\n  SELECT *\n  FROM dvh_syfo.stg_fk_isdialogmote_dm2\n),\n\ninfo_minus_tid AS (\n  SELECT * FROM (\n    SELECT\n      dialogmote_uuid,\n      fk_person1,\n      status_endring_type,\n      virksomhetsnr,\n      enhet_nr,\n      arbeidstaker_flagg,\n      arbeidsgiver_flagg\n    FROM\n      isdialogmote8\n    GROUP BY\n      dialogmote_uuid,\n      fk_person1,\n      status_endring_type,\n      virksomhetsnr,\n      enhet_nr,\n      arbeidstaker_flagg,\n      arbeidsgiver_flagg\n  )\n  PIVOT ( -- noqa\n    COUNT(status_endring_type)\n    FOR status_endring_type IN (\n      'INNKALT' AS innkalt,\n      'NYTT_TID_STED' AS nytt_tid_sted,\n      'FERDIGSTILT' AS ferdigstilt,\n      'AVLYST' AS avlyst\n    )\n  )\n),\n\nstatus_tidspunkt AS (\n  SELECT * FROM (\n    SELECT\n      dialogmote_uuid,\n      status_endring_type,\n      status_endring_tidspunkt\n    FROM\n      isdialogmote8\n    GROUP BY\n      dialogmote_uuid,\n      status_endring_type,\n      status_endring_tidspunkt\n  )\n  PIVOT ( --noqa\n    MAX(status_endring_tidspunkt)\n    FOR status_endring_type IN (\n      'INNKALT' AS innkalt_tidspunkt,\n      'NYTT_TID_STED' AS nytt_tid_sted_tidspunkt,\n      'FERDIGSTILT' AS ferdigstilt_tidspunkt,\n      'AVLYST' AS avlyst_tidspunkt\n    )\n  )\n),\n\ntid AS (\n  SELECT\n    dialogmote_uuid,\n    max(dialogmote_tidspunkt) AS nyeste_dialogmote,\n    max(tilfelle_startdato) AS nyeste_tilfelle_startdato\n  FROM\n    isdialogmote8\n  GROUP BY\n    dialogmote_uuid\n),\n\nfinal AS (\n  SELECT\n    info_minus_tid.dialogmote_uuid,\n    info_minus_tid.fk_person1,\n    tid.nyeste_dialogmote,\n    info_minus_tid.innkalt,\n    status_tidspunkt.innkalt_tidspunkt,\n    info_minus_tid.nytt_tid_sted,\n    status_tidspunkt.nytt_tid_sted_tidspunkt,\n    info_minus_tid.ferdigstilt,\n    status_tidspunkt.ferdigstilt_tidspunkt,\n    info_minus_tid.avlyst,\n    status_tidspunkt.avlyst_tidspunkt,\n    info_minus_tid.virksomhetsnr,\n    info_minus_tid.enhet_nr,\n    tid.nyeste_tilfelle_startdato,\n    info_minus_tid.arbeidstaker_flagg,\n    info_minus_tid.arbeidsgiver_flagg\n  FROM\n    info_minus_tid\n  LEFT JOIN\n    status_tidspunkt\n    ON info_minus_tid.dialogmote_uuid = status_tidspunkt.dialogmote_uuid\n  LEFT JOIN\n    tid\n    ON info_minus_tid.dialogmote_uuid = tid.dialogmote_uuid\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.fak_syfo_oppfolging_pvt"}, "model.dmx_poc.fak_syfo_dt_dialogmote": {"raw_sql": "WITH fak_syfo_dialogmote_s AS (\r\n  SELECT * FROM {{ ref('fak_syfo_dialogmote_tid') }}\r\n),\r\n\r\ndim_varighet AS (\r\n  SELECT * FROM {{ ref('stg_dim_varighet') }}\r\n),\r\n\r\nfinal AS (\r\n  SELECT\r\n    fak_syfo_dialogmote_s.*,\r\n    dim_varighet.pk_dim_varighet AS fk_dim_varighet\r\n  FROM fak_syfo_dialogmote_s\r\n  LEFT JOIN dim_varighet\r\n    ON\r\n      dim_varighet.varighet_dager = trunc(\r\n        fak_syfo_dialogmote_s.nyeste_dialogmote\r\n      ) - trunc(fak_syfo_dialogmote_s.nyeste_tilfelle_startdato)\r\n)\r\n/*\r\nlegger inn table som target tabell\r\n*/\r\n{{ config(\r\n    materialized=\"table\"\r\n) }}\r\n\r\nSELECT final.* FROM final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.fak_syfo_dialogmote_tid", "model.dmx_poc.stg_dim_varighet"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfo", "database": null, "tags": ["syfo"], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfo", "fqn": ["dmx_poc", "dvh_syfo", "torg", "fak_syfo_dt_dialogmote"], "unique_id": "model.dmx_poc.fak_syfo_dt_dialogmote", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "dvh_syfo\\torg\\fak_syfo_dt_dialogmote.sql", "original_file_path": "models\\dvh_syfo\\torg\\fak_syfo_dt_dialogmote.sql", "name": "fak_syfo_dt_dialogmote", "alias": "fak_syfo_dt_dialogmote", "checksum": {"name": "sha256", "checksum": "5164ef1966af2fba559dafc3c57ade9a4bd03d4027bb3ae7417ebba7597bbf71"}, "tags": ["syfo"], "refs": [["fak_syfo_dialogmote_tid"], ["stg_dim_varighet"]], "sources": [], "description": "Target tabell", "columns": {"DIALOGMOTE_UUID": {"name": "DIALOGMOTE_UUID", "description": "unique identifikator", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\dvh_syfo\\dvh_syfo_all_models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\torg\\fak_syfo_dt_dialogmote.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dvh_syfo", "tags": "syfo", "materialized": "table"}, "created_at": 1651501624.594173, "compiled_sql": "WITH fak_syfo_dialogmote_s AS (\n  SELECT * FROM dvh_syfo.fak_syfo_dialogmote_tid\n),\n\ndim_varighet AS (\n  SELECT * FROM dvh_syfo.stg_dim_varighet\n),\n\nfinal AS (\n  SELECT\n    fak_syfo_dialogmote_s.*,\n    dim_varighet.pk_dim_varighet AS fk_dim_varighet\n  FROM fak_syfo_dialogmote_s\n  LEFT JOIN dim_varighet\n    ON\n      dim_varighet.varighet_dager = trunc(\n        fak_syfo_dialogmote_s.nyeste_dialogmote\n      ) - trunc(fak_syfo_dialogmote_s.nyeste_tilfelle_startdato)\n)\n/*\nlegger inn table som target tabell\n*/\n\n\nSELECT final.* FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfo.fak_syfo_dt_dialogmote"}, "model.dmx_poc.test__ssb_syfra_teller_kv": {"raw_sql": "SELECT\r\n  rownum AS id,\r\n  fnr,\r\n  gj_uforg,\r\n  TO_DATE(s_start, 'YYYYMMDD') AS s_start,\r\n  TO_DATE(s_stopp, 'YYYYMMDD') AS s_stopp,\r\n  TO_DATE(p_start, 'YYYYMMDD') AS p_start,\r\n  TO_DATE(p_slutt, 'YYYYMMDD') AS p_slutt\r\nFROM {{ source('dvh_syfra', 'ssb_syfra_teller_kv') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dvh_syfra.ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dvh_syfra", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dwhu1", "schema": "dvh_syfra", "fqn": ["dmx_poc", "syfra", "test__ssb_syfra_teller_kv"], "unique_id": "model.dmx_poc.test__ssb_syfra_teller_kv", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\test__ssb_syfra_teller_kv.sql", "original_file_path": "models\\syfra\\test__ssb_syfra_teller_kv.sql", "name": "test__ssb_syfra_teller_kv", "alias": "test__ssb_syfra_teller_kv", "checksum": {"name": "sha256", "checksum": "7a60fc04890455bc7b301844d3af01f555efe7bb73b9e6e8b7a40ccbfa24043a"}, "tags": ["syfra"], "refs": [], "sources": [["dvh_syfra", "ssb_syfra_teller_kv"]], "description": "Test view brukt for verifisering av tellerfilerdata", "columns": {"s_start": {"name": "s_start", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_stopp": {"name": "s_stopp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fnr": {"name": "fnr", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gj_uforg": {"name": "gj_uforg", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_start": {"name": "p_start", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_slutt": {"name": "p_slutt", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dmx_poc://models\\syfra\\models.yml", "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\test__ssb_syfra_teller_kv.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra", "schema": "dvh_syfra"}, "created_at": 1651501624.6577952, "compiled_sql": "SELECT\n  rownum AS id,\n  fnr,\n  gj_uforg,\n  TO_DATE(s_start, 'YYYYMMDD') AS s_start,\n  TO_DATE(s_stopp, 'YYYYMMDD') AS s_stopp,\n  TO_DATE(p_start, 'YYYYMMDD') AS p_start,\n  TO_DATE(p_slutt, 'YYYYMMDD') AS p_slutt\nFROM dvh_syfra.ssb_syfra_teller_kv", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dvh_syfra.test__ssb_syfra_teller_kv"}, "test.dmx_poc.gj_uforg_har_maks_ti_desimaler": {"raw_sql": "SELECT gj_uforg\r\nFROM {{ ref('test__ssb_syfra_teller_kv') }}\r\nWHERE (LENGTH((gj_uforg) - TRUNC(gj_uforg)) - 1) > 10", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "gj_uforg_har_maks_ti_desimaler"], "unique_id": "test.dmx_poc.gj_uforg_har_maks_ti_desimaler", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\gj_uforg_har_maks_ti_desimaler.sql", "original_file_path": "tests\\syfra\\gj_uforg_har_maks_ti_desimaler.sql", "name": "gj_uforg_har_maks_ti_desimaler", "alias": "gj_uforg_har_maks_ti_desimaler", "checksum": {"name": "sha256", "checksum": "9d46bac971c32f03a4a6135d683f4c7b81b49cc20c667ce29e49720d5f3f7fdf"}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\tests\\syfra\\gj_uforg_har_maks_ti_desimaler.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.5403328, "compiled_sql": "SELECT gj_uforg\nFROM dvh_syfra.test__ssb_syfra_teller_kv\nWHERE (LENGTH((gj_uforg) - TRUNC(gj_uforg)) - 1) > 10", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.dmx_poc.gj_uforg_mellom_0.2_og_1": {"raw_sql": "SELECT gj_uforg\r\nFROM {{ ref('test__ssb_syfra_teller_kv') }}\r\nWHERE gj_uforg NOT BETWEEN 0.2 AND 1", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "gj_uforg_mellom_0.2_og_1"], "unique_id": "test.dmx_poc.gj_uforg_mellom_0.2_og_1", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\gj_uforg_mellom_0.2_og_1.sql", "original_file_path": "tests\\syfra\\gj_uforg_mellom_0.2_og_1.sql", "name": "gj_uforg_mellom_0.2_og_1", "alias": "gj_uforg_mellom_0.2_og_1", "checksum": {"name": "sha256", "checksum": "b029cce0ca4dd629f77f04b959b5629028d788f2a59ff33f40bc8503255621d1"}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\tests\\syfra\\gj_uforg_mellom_0.2_og_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.5452302, "compiled_sql": "SELECT gj_uforg\nFROM dvh_syfra.test__ssb_syfra_teller_kv\nWHERE gj_uforg NOT BETWEEN 0.2 AND 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.dmx_poc.ikke_overlappende_s_start_og_s_slutt": {"raw_sql": "SELECT\r\n  tilfelle.s_start,\r\n  tilfelle.s_stopp\r\nFROM {{ ref('test__ssb_syfra_teller_kv') }} tilfelle\r\nLEFT JOIN {{ ref('test__ssb_syfra_teller_kv') }} ref_tilfelle ON\r\n  tilfelle.id != ref_tilfelle.id\r\n  AND tilfelle.fnr = ref_tilfelle.fnr\r\nWHERE\r\n  tilfelle.s_start BETWEEN ref_tilfelle.s_start AND ref_tilfelle.s_stopp\r\n  OR tilfelle.s_stopp BETWEEN ref_tilfelle.s_start AND ref_tilfelle.s_stopp", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv", "model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "ikke_overlappende_s_start_og_s_slutt"], "unique_id": "test.dmx_poc.ikke_overlappende_s_start_og_s_slutt", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\ikke_overlappende_s_start_og_s_slutt.sql", "original_file_path": "tests\\syfra\\ikke_overlappende_s_start_og_s_slutt.sql", "name": "ikke_overlappende_s_start_og_s_slutt", "alias": "ikke_overlappende_s_start_og_s_slutt", "checksum": {"name": "sha256", "checksum": "ffeaf11c5438b52084ccfb1b51edb2c83f4027980841e4e3021abca8c4261f0a"}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"], ["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\tests\\syfra\\ikke_overlappende_s_start_og_s_slutt.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.5452302, "compiled_sql": "SELECT\n  tilfelle.s_start,\n  tilfelle.s_stopp\nFROM dvh_syfra.test__ssb_syfra_teller_kv tilfelle\nLEFT JOIN dvh_syfra.test__ssb_syfra_teller_kv ref_tilfelle ON\n  tilfelle.id != ref_tilfelle.id\n  AND tilfelle.fnr = ref_tilfelle.fnr\nWHERE\n  tilfelle.s_start BETWEEN ref_tilfelle.s_start AND ref_tilfelle.s_stopp\n  OR tilfelle.s_stopp BETWEEN ref_tilfelle.s_start AND ref_tilfelle.s_stopp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.dmx_poc.person_ikke_kode67": {"raw_sql": "SELECT teller.fnr\r\nFROM {{ ref('test__ssb_syfra_teller_kv') }} teller\r\nLEFT JOIN\r\n  {{ source('dt_person', 'dvh_person_ident_off_id') }} person_ident ON\r\n    teller.fnr = person_ident.off_id\r\n    AND person_ident.gyldig_fra_dato <= teller.p_slutt + 45\r\n    AND person_ident.gyldig_til_dato >= teller.p_start\r\nWHERE person_ident.skjermet_kode IN (6, 7)", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["source.dmx_poc.dt_person.dvh_person_ident_off_id", "model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "person_ikke_kode67"], "unique_id": "test.dmx_poc.person_ikke_kode67", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\person_ikke_kode67.sql", "original_file_path": "tests\\syfra\\person_ikke_kode67.sql", "name": "person_ikke_kode67", "alias": "person_ikke_kode67", "checksum": {"name": "sha256", "checksum": "93e147f04d94dde40e1226b9861af5793240a1f347af545a6351eaae802462d3"}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [["dt_person", "dvh_person_ident_off_id"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\tests\\syfra\\person_ikke_kode67.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.550127, "compiled_sql": "SELECT teller.fnr\nFROM dvh_syfra.test__ssb_syfra_teller_kv teller\nLEFT JOIN\n  dt_person.dvh_person_ident_off_id person_ident ON\n    teller.fnr = person_ident.off_id\n    AND person_ident.gyldig_fra_dato <= teller.p_slutt + 45\n    AND person_ident.gyldig_til_dato >= teller.p_start\nWHERE person_ident.skjermet_kode IN (6, 7)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.dmx_poc.s_start_mindre_enn_s_stopp": {"raw_sql": "SELECT s_start\r\nFROM {{ ref('test__ssb_syfra_teller_kv') }}\r\nWHERE s_start > s_stopp", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "s_start_mindre_enn_s_stopp"], "unique_id": "test.dmx_poc.s_start_mindre_enn_s_stopp", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\s_start_mindre_enn_s_stopp.sql", "original_file_path": "tests\\syfra\\s_start_mindre_enn_s_stopp.sql", "name": "s_start_mindre_enn_s_stopp", "alias": "s_start_mindre_enn_s_stopp", "checksum": {"name": "sha256", "checksum": "299bf09ea207fec73bd874fd8918ce6bc4596764c9617ba4f2aba50cf7648eac"}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\tests\\syfra\\s_start_mindre_enn_s_stopp.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.555024, "compiled_sql": "SELECT s_start\nFROM dvh_syfra.test__ssb_syfra_teller_kv\nWHERE s_start > s_stopp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.dmx_poc.s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt": {"raw_sql": "SELECT s_stopp\r\nFROM {{ ref('test__ssb_syfra_teller_kv') }}\r\nWHERE\r\n  TRUNC(s_stopp) > TRUNC(ADD_MONTHS(p_slutt, 14))", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt"], "unique_id": "test.dmx_poc.s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "syfra\\s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt.sql", "original_file_path": "tests\\syfra\\s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt.sql", "name": "s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt", "alias": "s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt", "checksum": {"name": "sha256", "checksum": "6ad41df4888de13cec1787051741dcad861cfa8d6597941e10250610b7e8bc28"}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\tests\\syfra\\s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.5599217, "compiled_sql": "SELECT s_stopp\nFROM dvh_syfra.test__ssb_syfra_teller_kv\nWHERE\n  TRUNC(s_stopp) > TRUNC(ADD_MONTHS(p_slutt, 14))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.dmx_poc.unique_stg_dim_tid_pk_dim_tid.9af26546a8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pk_dim_tid", "model": "{{ get_where_subquery(ref('stg_dim_tid')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.stg_dim_tid"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_stg_dim_tid_pk_dim_tid"], "unique_id": "test.dmx_poc.unique_stg_dim_tid_pk_dim_tid.9af26546a8", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_stg_dim_tid_pk_dim_tid.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_stg_dim_tid_pk_dim_tid", "alias": "unique_stg_dim_tid_pk_dim_tid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_dim_tid"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_stg_dim_tid_pk_dim_tid.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6039581, "compiled_sql": "\n    \n    \n\nselect\n    pk_dim_tid as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.stg_dim_tid\nwhere pk_dim_tid is not null\ngroup by pk_dim_tid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pk_dim_tid", "file_key_name": "models.stg_dim_tid"}, "test.dmx_poc.not_null_stg_dim_tid_pk_dim_tid.ea50fe126d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pk_dim_tid", "model": "{{ get_where_subquery(ref('stg_dim_tid')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.stg_dim_tid"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_stg_dim_tid_pk_dim_tid"], "unique_id": "test.dmx_poc.not_null_stg_dim_tid_pk_dim_tid.ea50fe126d", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_stg_dim_tid_pk_dim_tid.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_stg_dim_tid_pk_dim_tid", "alias": "not_null_stg_dim_tid_pk_dim_tid", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_dim_tid"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_stg_dim_tid_pk_dim_tid.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6088526, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.stg_dim_tid\nwhere pk_dim_tid is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pk_dim_tid", "file_key_name": "models.stg_dim_tid"}, "test.dmx_poc.unique_stg_dim_person1_pk_dim_person.fdad0d3d85": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "pk_dim_person", "model": "{{ get_where_subquery(ref('stg_dim_person1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.stg_dim_person1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_stg_dim_person1_pk_dim_person"], "unique_id": "test.dmx_poc.unique_stg_dim_person1_pk_dim_person.fdad0d3d85", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_stg_dim_person1_pk_dim_person.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_stg_dim_person1_pk_dim_person", "alias": "unique_stg_dim_person1_pk_dim_person", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_dim_person1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_stg_dim_person1_pk_dim_person.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6088526, "compiled_sql": "\n    \n    \n\nselect\n    pk_dim_person as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.stg_dim_person1\nwhere pk_dim_person is not null\ngroup by pk_dim_person\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pk_dim_person", "file_key_name": "models.stg_dim_person1"}, "test.dmx_poc.not_null_stg_dim_person1_pk_dim_person.2be0fa03d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "pk_dim_person", "model": "{{ get_where_subquery(ref('stg_dim_person1')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.stg_dim_person1"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_stg_dim_person1_pk_dim_person"], "unique_id": "test.dmx_poc.not_null_stg_dim_person1_pk_dim_person.2be0fa03d8", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_stg_dim_person1_pk_dim_person.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_stg_dim_person1_pk_dim_person", "alias": "not_null_stg_dim_person1_pk_dim_person", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_dim_person1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_stg_dim_person1_pk_dim_person.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6137455, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.stg_dim_person1\nwhere pk_dim_person is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "pk_dim_person", "file_key_name": "models.stg_dim_person1"}, "test.dmx_poc.unique_stg_dim_organisasjon_ek_org_node.c2509c6475": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ek_org_node", "model": "{{ get_where_subquery(ref('stg_dim_organisasjon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.stg_dim_organisasjon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_stg_dim_organisasjon_ek_org_node"], "unique_id": "test.dmx_poc.unique_stg_dim_organisasjon_ek_org_node.c2509c6475", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_stg_dim_organisasjon_ek_org_node.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_stg_dim_organisasjon_ek_org_node", "alias": "unique_stg_dim_organisasjon_ek_org_node", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_dim_organisasjon"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_stg_dim_organisasjon_ek_org_node.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6137455, "compiled_sql": "\n    \n    \n\nselect\n    ek_org_node as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.stg_dim_organisasjon\nwhere ek_org_node is not null\ngroup by ek_org_node\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ek_org_node", "file_key_name": "models.stg_dim_organisasjon"}, "test.dmx_poc.not_null_stg_dim_organisasjon_ek_org_node.060b25a47b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ek_org_node", "model": "{{ get_where_subquery(ref('stg_dim_organisasjon')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.stg_dim_organisasjon"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_stg_dim_organisasjon_ek_org_node"], "unique_id": "test.dmx_poc.not_null_stg_dim_organisasjon_ek_org_node.060b25a47b", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_stg_dim_organisasjon_ek_org_node.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_stg_dim_organisasjon_ek_org_node", "alias": "not_null_stg_dim_organisasjon_ek_org_node", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_dim_organisasjon"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_stg_dim_organisasjon_ek_org_node.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6137455, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.stg_dim_organisasjon\nwhere ek_org_node is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ek_org_node", "file_key_name": "models.stg_dim_organisasjon"}, "test.dmx_poc.unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.1b2b6a4684": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_oppfolging_pvt')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_oppfolging_pvt"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.1b2b6a4684", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID", "alias": "unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_oppfolging_pvt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6186378, "compiled_sql": "\n    \n    \n\nselect\n    DIALOGMOTE_UUID as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.fak_syfo_oppfolging_pvt\nwhere DIALOGMOTE_UUID is not null\ngroup by DIALOGMOTE_UUID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_oppfolging_pvt"}, "test.dmx_poc.not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.e263e7e8f6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_oppfolging_pvt')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_oppfolging_pvt"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.e263e7e8f6", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID", "alias": "not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_oppfolging_pvt"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6186378, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.fak_syfo_oppfolging_pvt\nwhere DIALOGMOTE_UUID is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_oppfolging_pvt"}, "test.dmx_poc.unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.8fc1a50384": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_dialogmote')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_dialogmote"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_fak_syfo_dialogmote_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.8fc1a50384", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_fak_syfo_dialogmote_DIALOGMOTE_UUID", "alias": "unique_fak_syfo_dialogmote_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_dialogmote"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.623531, "compiled_sql": "\n    \n    \n\nselect\n    DIALOGMOTE_UUID as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.fak_syfo_dialogmote\nwhere DIALOGMOTE_UUID is not null\ngroup by DIALOGMOTE_UUID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_dialogmote"}, "test.dmx_poc.not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.749aaed806": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_dialogmote')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_dialogmote"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.749aaed806", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID", "alias": "not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_dialogmote"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.623531, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.fak_syfo_dialogmote\nwhere DIALOGMOTE_UUID is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_dialogmote"}, "test.dmx_poc.unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.3f580129c1": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_dialogmote_org')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_dialogmote_org"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.3f580129c1", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID", "alias": "unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_dialogmote_org"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6284246, "compiled_sql": "\n    \n    \n\nselect\n    DIALOGMOTE_UUID as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.fak_syfo_dialogmote_org\nwhere DIALOGMOTE_UUID is not null\ngroup by DIALOGMOTE_UUID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_dialogmote_org"}, "test.dmx_poc.not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.b624588c88": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_dialogmote_org')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_dialogmote_org"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.b624588c88", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID", "alias": "not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_dialogmote_org"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6284246, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.fak_syfo_dialogmote_org\nwhere DIALOGMOTE_UUID is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_dialogmote_org"}, "test.dmx_poc.unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.921d124218": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_dt_dialogmote')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_dt_dialogmote"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.921d124218", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID", "alias": "unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_dt_dialogmote"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6333182, "compiled_sql": "\n    \n    \n\nselect\n    DIALOGMOTE_UUID as unique_field,\n    count(*) as n_records\n\nfrom dvh_syfo.fak_syfo_dt_dialogmote\nwhere DIALOGMOTE_UUID is not null\ngroup by DIALOGMOTE_UUID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_dt_dialogmote"}, "test.dmx_poc.not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.40a8d9e19a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIALOGMOTE_UUID", "model": "{{ get_where_subquery(ref('fak_syfo_dt_dialogmote')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.fak_syfo_dt_dialogmote"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "dvh_syfo", "not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID"], "unique_id": "test.dmx_poc.not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.40a8d9e19a", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.sql", "original_file_path": "models\\dvh_syfo\\dvh_syfo_all_models.yml", "name": "not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID", "alias": "not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fak_syfo_dt_dialogmote"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\dvh_syfo\\dvh_syfo_all_models.yml\\not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1651501624.6333182, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfo.fak_syfo_dt_dialogmote\nwhere DIALOGMOTE_UUID is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIALOGMOTE_UUID", "file_key_name": "models.fak_syfo_dt_dialogmote"}, "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_start.8747613d8a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "s_start", "model": "{{ get_where_subquery(ref('test__ssb_syfra_teller_kv')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "not_null_test__ssb_syfra_teller_kv_s_start"], "unique_id": "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_start.8747613d8a", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_test__ssb_syfra_teller_kv_s_start.sql", "original_file_path": "models\\syfra\\models.yml", "name": "not_null_test__ssb_syfra_teller_kv_s_start", "alias": "not_null_test__ssb_syfra_teller_kv_s_start", "checksum": {"name": "none", "checksum": ""}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\models.yml\\not_null_test__ssb_syfra_teller_kv_s_start.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.6577952, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfra.test__ssb_syfra_teller_kv\nwhere s_start is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "s_start", "file_key_name": "models.test__ssb_syfra_teller_kv"}, "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_stopp.4f1075fe39": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "s_stopp", "model": "{{ get_where_subquery(ref('test__ssb_syfra_teller_kv')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "not_null_test__ssb_syfra_teller_kv_s_stopp"], "unique_id": "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_stopp.4f1075fe39", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_test__ssb_syfra_teller_kv_s_stopp.sql", "original_file_path": "models\\syfra\\models.yml", "name": "not_null_test__ssb_syfra_teller_kv_s_stopp", "alias": "not_null_test__ssb_syfra_teller_kv_s_stopp", "checksum": {"name": "none", "checksum": ""}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\models.yml\\not_null_test__ssb_syfra_teller_kv_s_stopp.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.6622052, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfra.test__ssb_syfra_teller_kv\nwhere s_stopp is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "s_stopp", "file_key_name": "models.test__ssb_syfra_teller_kv"}, "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_fnr.04091e79e4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fnr", "model": "{{ get_where_subquery(ref('test__ssb_syfra_teller_kv')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "not_null_test__ssb_syfra_teller_kv_fnr"], "unique_id": "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_fnr.04091e79e4", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_test__ssb_syfra_teller_kv_fnr.sql", "original_file_path": "models\\syfra\\models.yml", "name": "not_null_test__ssb_syfra_teller_kv_fnr", "alias": "not_null_test__ssb_syfra_teller_kv_fnr", "checksum": {"name": "none", "checksum": ""}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\models.yml\\not_null_test__ssb_syfra_teller_kv_fnr.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.6622052, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfra.test__ssb_syfra_teller_kv\nwhere fnr is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fnr", "file_key_name": "models.test__ssb_syfra_teller_kv"}, "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_gj_uforg.9046d951e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gj_uforg", "model": "{{ get_where_subquery(ref('test__ssb_syfra_teller_kv')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "not_null_test__ssb_syfra_teller_kv_gj_uforg"], "unique_id": "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_gj_uforg.9046d951e1", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_test__ssb_syfra_teller_kv_gj_uforg.sql", "original_file_path": "models\\syfra\\models.yml", "name": "not_null_test__ssb_syfra_teller_kv_gj_uforg", "alias": "not_null_test__ssb_syfra_teller_kv_gj_uforg", "checksum": {"name": "none", "checksum": ""}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\models.yml\\not_null_test__ssb_syfra_teller_kv_gj_uforg.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.667098, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfra.test__ssb_syfra_teller_kv\nwhere gj_uforg is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gj_uforg", "file_key_name": "models.test__ssb_syfra_teller_kv"}, "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_start.b5c1d4a070": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_start", "model": "{{ get_where_subquery(ref('test__ssb_syfra_teller_kv')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "not_null_test__ssb_syfra_teller_kv_p_start"], "unique_id": "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_start.b5c1d4a070", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_test__ssb_syfra_teller_kv_p_start.sql", "original_file_path": "models\\syfra\\models.yml", "name": "not_null_test__ssb_syfra_teller_kv_p_start", "alias": "not_null_test__ssb_syfra_teller_kv_p_start", "checksum": {"name": "none", "checksum": ""}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\models.yml\\not_null_test__ssb_syfra_teller_kv_p_start.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.667098, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfra.test__ssb_syfra_teller_kv\nwhere p_start is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_start", "file_key_name": "models.test__ssb_syfra_teller_kv"}, "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_slutt.e95b185a90": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_slutt", "model": "{{ get_where_subquery(ref('test__ssb_syfra_teller_kv')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["syfra"], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dwhu1", "schema": "dbt_test__audit", "fqn": ["dmx_poc", "syfra", "not_null_test__ssb_syfra_teller_kv_p_slutt"], "unique_id": "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_slutt.e95b185a90", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "not_null_test__ssb_syfra_teller_kv_p_slutt.sql", "original_file_path": "models\\syfra\\models.yml", "name": "not_null_test__ssb_syfra_teller_kv_p_slutt", "alias": "not_null_test__ssb_syfra_teller_kv_p_slutt", "checksum": {"name": "none", "checksum": ""}, "tags": ["syfra"], "refs": [["test__ssb_syfra_teller_kv"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\dmx_poc\\models\\syfra\\models.yml\\not_null_test__ssb_syfra_teller_kv_p_slutt.sql", "build_path": null, "deferred": false, "unrendered_config": {"tags": "syfra"}, "created_at": 1651501624.6719923, "compiled_sql": "\n    \n    \n\nselect * from (\nselect count(*) as null_count\nfrom dvh_syfra.test__ssb_syfra_teller_kv\nwhere p_slutt is null) c where c.null_count != 0\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_slutt", "file_key_name": "models.test__ssb_syfra_teller_kv"}}, "sources": {"source.dmx_poc.dmx_pox_dialogmote.FK_ISDIALOGMOTE_DM2": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_pox_dialogmote", "FK_ISDIALOGMOTE_DM2"], "database": "dwhu1", "schema": "DVH_SYFO", "unique_id": "source.dmx_poc.dmx_pox_dialogmote.FK_ISDIALOGMOTE_DM2", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "FK_ISDIALOGMOTE_DM2", "source_name": "dmx_pox_dialogmote", "source_description": "Dialogm\u00f8te data som kommer fra MODIA ", "loader": "", "identifier": "FK_ISDIALOGMOTE_DM2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Informasjon om dialogm\u00f8te som kommer fra modia", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DVH_SYFO.FK_ISDIALOGMOTE_DM2", "created_at": 1651501624.6768868}, "source.dmx_poc.dmx_pox_oppfolging.FAK_SF_OPPFOLGING_D2_MND": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_pox_oppfolging", "FAK_SF_OPPFOLGING_D2_MND"], "database": "dwhu1", "schema": "DT_P", "unique_id": "source.dmx_poc.dmx_pox_oppfolging.FAK_SF_OPPFOLGING_D2_MND", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "FAK_SF_OPPFOLGING_D2_MND", "source_name": "dmx_pox_oppfolging", "source_description": "Oppf\u00f8lging samt diverse felles dimensjoner", "loader": "", "identifier": "FAK_SF_OPPFOLGING_D2_MND", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Facta med oppf\u00f8lgingsdata", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DT_P.FAK_SF_OPPFOLGING_D2_MND", "created_at": 1651501624.6768868}, "source.dmx_poc.dmx_pox_oppfolging.DIM_TID": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_pox_oppfolging", "DIM_TID"], "database": "dwhu1", "schema": "DT_P", "unique_id": "source.dmx_poc.dmx_pox_oppfolging.DIM_TID", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "DIM_TID", "source_name": "dmx_pox_oppfolging", "source_description": "Oppf\u00f8lging samt diverse felles dimensjoner", "loader": "", "identifier": "DIM_TID", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tidsdimensjonen", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DT_P.DIM_TID", "created_at": 1651501624.6768868}, "source.dmx_poc.dmx_pox_oppfolging.DIM_ORG": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_pox_oppfolging", "DIM_ORG"], "database": "dwhu1", "schema": "DT_P", "unique_id": "source.dmx_poc.dmx_pox_oppfolging.DIM_ORG", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "DIM_ORG", "source_name": "dmx_pox_oppfolging", "source_description": "Oppf\u00f8lging samt diverse felles dimensjoner", "loader": "", "identifier": "DIM_ORG", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Organiasjonene - alle", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DT_P.DIM_ORG", "created_at": 1651501624.6768868}, "source.dmx_poc.dmx_pox_oppfolging.DIM_VARIGHET": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_pox_oppfolging", "DIM_VARIGHET"], "database": "dwhu1", "schema": "DT_P", "unique_id": "source.dmx_poc.dmx_pox_oppfolging.DIM_VARIGHET", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "DIM_VARIGHET", "source_name": "dmx_pox_oppfolging", "source_description": "Oppf\u00f8lging samt diverse felles dimensjoner", "loader": "", "identifier": "DIM_VARIGHET", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Varighet - alle", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DT_P.DIM_VARIGHET", "created_at": 1651501624.6768868}, "source.dmx_poc.dmx_pox_oppfolging.DIM_NAERING": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_pox_oppfolging", "DIM_NAERING"], "database": "dwhu1", "schema": "DT_P", "unique_id": "source.dmx_poc.dmx_pox_oppfolging.DIM_NAERING", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "DIM_NAERING", "source_name": "dmx_pox_oppfolging", "source_description": "Oppf\u00f8lging samt diverse felles dimensjoner", "loader": "", "identifier": "DIM_NAERING", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "N\u00e6ringer", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DT_P.DIM_NAERING", "created_at": 1651501624.6768868}, "source.dmx_poc.dmx_poc_person.DIM_PERSON1": {"fqn": ["dmx_poc", "dvh_syfo", "dmx_poc_person", "DIM_PERSON1"], "database": "dwhu1", "schema": "DT_PERSON", "unique_id": "source.dmx_poc.dmx_poc_person.DIM_PERSON1", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\dvh_syfo\\schema.yml", "original_file_path": "models\\dvh_syfo\\schema.yml", "name": "DIM_PERSON1", "source_name": "dmx_poc_person", "source_description": "henter fra DT_PERSON", "loader": "", "identifier": "DIM_PERSON1", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "informasjon om person", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfo"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "DT_PERSON.DIM_PERSON1", "created_at": 1651501624.6768868}, "source.dmx_poc.dt_person.dvh_person_ident_off_id": {"fqn": ["dmx_poc", "syfra", "dt_person", "dvh_person_ident_off_id"], "database": "dwhu1", "schema": "dt_person", "unique_id": "source.dmx_poc.dt_person.dvh_person_ident_off_id", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\syfra\\sources.yml", "original_file_path": "models\\syfra\\sources.yml", "name": "dvh_person_ident_off_id", "source_name": "dt_person", "source_description": "", "loader": "", "identifier": "dvh_person_ident_off_id", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfra"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "dt_person.dvh_person_ident_off_id", "created_at": 1651501624.6768868}, "source.dmx_poc.dvh_syfra.ssb_syfra_teller_kv": {"fqn": ["dmx_poc", "syfra", "dvh_syfra", "ssb_syfra_teller_kv"], "database": "dwhu1", "schema": "dvh_syfra", "unique_id": "source.dmx_poc.dvh_syfra.ssb_syfra_teller_kv", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "models\\syfra\\sources.yml", "original_file_path": "models\\syfra\\sources.yml", "name": "ssb_syfra_teller_kv", "source_name": "dvh_syfra", "source_description": "", "loader": "", "identifier": "ssb_syfra_teller_kv", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": ["syfra"], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "dvh_syfra.ssb_syfra_teller_kv", "created_at": 1651501624.6768868}}, "macros": {"macro.dmx_poc.generate_schema_name": {"unique_id": "macro.dmx_poc.generate_schema_name", "package_name": "dmx_poc", "root_path": "C:\\Users\\RA_P157554\\git\\dvh-sykefravar-dmx", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.5719323}, "macro.dbt_oracle.oracle__get_columns_in_query": {"unique_id": "macro.dbt_oracle.oracle__get_columns_in_query", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__get_columns_in_query", "macro_sql": "{% macro oracle__get_columns_in_query(select_sql) %}\r\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\r\n        select * from (\r\n            {{ select_sql }}\r\n        ) dbt_sbq_tmp\r\n        where 1 = 0 and rownum < 1\r\n    {% endcall %}\r\n\r\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6121836}, "macro.dbt_oracle.oracle__create_schema": {"unique_id": "macro.dbt_oracle.oracle__create_schema", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_schema", "macro_sql": "{% macro oracle__create_schema(database_name, schema_name) -%}\r\n  {% if relation.database -%}\r\n    {{ adapter.verify_database(relation.database) }}\r\n  {%- endif -%}\r\n  {%- call statement('drop_schema') -%}\r\n    -- Noop for not breaking tests, oracle\r\n    -- schemas are actualy users, we can't\r\n    -- create it here\r\n    select 'a' from dual\r\n  {%- endcall -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6121836}, "macro.dbt_oracle.oracle__drop_schema": {"unique_id": "macro.dbt_oracle.oracle__drop_schema", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__drop_schema", "macro_sql": "{% macro oracle__drop_schema(schema) -%}\r\n  {% if schema.database -%}\r\n    {{ adapter.verify_database(schema.database) }}\r\n  {%- endif -%}\r\n  {%- call statement('drop_schema') -%}\r\n    -- from https://gist.github.com/rafaeleyng/33eaef673fc4ee98a6de4f70c8ce3657\r\n    BEGIN\r\n    FOR cur_rec IN (SELECT object_name, object_type\r\n                      FROM ALL_objects\r\n                      WHERE object_type IN\r\n                              ('TABLE',\r\n                                'VIEW',\r\n                                'PACKAGE',\r\n                                'PROCEDURE',\r\n                                'FUNCTION',\r\n                                'SEQUENCE',\r\n                                'TYPE',\r\n                                'SYNONYM',\r\n                                'MATERIALIZED VIEW'\r\n                              )\r\n                      AND owner = '{{ schema | upper }}')\r\n    LOOP\r\n        BEGIN\r\n          IF cur_rec.object_type = 'TABLE'\r\n          THEN\r\n              EXECUTE IMMEDIATE    'DROP '\r\n                                || cur_rec.object_type\r\n                                || ' \"'\r\n                                || cur_rec.object_name\r\n                                || '\" CASCADE CONSTRAINTS';\r\n          ELSE\r\n              EXECUTE IMMEDIATE    'DROP '\r\n                                || cur_rec.object_type\r\n                                || ' \"'\r\n                                || cur_rec.object_name\r\n                                || '\"';\r\n          END IF;\r\n        EXCEPTION\r\n          WHEN OTHERS\r\n          THEN\r\n              DBMS_OUTPUT.put_line (   'FAILED: DROP '\r\n                                    || cur_rec.object_type\r\n                                    || ' \"'\r\n                                    || cur_rec.object_name\r\n                                    || '\"'\r\n                                  );\r\n        END;\r\n    END LOOP;\r\n  END;\r\n  {%- endcall -%}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6121836}, "macro.dbt_oracle.oracle__create_table_as_backup": {"unique_id": "macro.dbt_oracle.oracle__create_table_as_backup", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_table_as_backup", "macro_sql": "{% macro oracle__create_table_as_backup(temporary, relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary -%}\r\n    global temporary\r\n  {%- endif %} table {{ relation.include(schema=(not temporary)).quote(schema=False, identifier=False) }}\r\n  {% if temporary -%} on commit preserve rows {%- endif %}\r\n  as\r\n    {{ sql }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6121836}, "macro.dbt_oracle.oracle__create_table_as": {"unique_id": "macro.dbt_oracle.oracle__create_table_as", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_table_as", "macro_sql": "{% macro oracle__create_table_as(temporary, relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n\r\n  create {% if temporary -%}\r\n    global temporary\r\n  {%- endif %} table {{ relation.include(schema=(not temporary)).quote(schema=False, identifier=False) }}\r\n  {% if temporary -%} on commit preserve rows {%- endif %}\r\n  as\r\n    {{ sql }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6170776}, "macro.dbt_oracle.oracle__create_view_as": {"unique_id": "macro.dbt_oracle.oracle__create_view_as", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_view_as", "macro_sql": "{% macro oracle__create_view_as(relation, sql) -%}\r\n  {%- set sql_header = config.get('sql_header', none) -%}\r\n\r\n  {{ sql_header if sql_header is not none }}\r\n  create view {{ relation.quote(schema=False, identifier=False)  }} as\r\n    {{ sql }}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6170776}, "macro.dbt_oracle.oracle__get_columns_in_relation": {"unique_id": "macro.dbt_oracle.oracle__get_columns_in_relation", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__get_columns_in_relation", "macro_sql": "{% macro oracle__get_columns_in_relation(relation) -%}\r\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\r\n      with columns as (\r\n        select\r\n            UPPER(SYS_CONTEXT('userenv', 'DB_NAME')) table_catalog,\r\n            UPPER(owner) table_schema,\r\n            table_name,\r\n            column_name,\r\n            data_type,\r\n            data_type_mod,\r\n            decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\r\n            data_type_owner domain_schema,\r\n            data_length character_maximum_length,\r\n            data_length character_octet_length,\r\n            data_length,\r\n            data_precision numeric_precision,\r\n            data_scale numeric_scale,\r\n            nullable is_nullable,\r\n            column_id ordinal_position,\r\n            default_length,\r\n            data_default column_default,\r\n            num_distinct,\r\n            low_value,\r\n            high_value,\r\n            density,\r\n            num_nulls,\r\n            num_buckets,\r\n            last_analyzed,\r\n            sample_size,\r\n            SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\r\n            'SYS' character_set_schema,\r\n            SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\r\n            'SYS' collation_schema,\r\n            character_set_name,\r\n            char_col_decl_length,\r\n            global_stats,\r\n            user_stats,\r\n            avg_col_len,\r\n            char_length,\r\n            char_used,\r\n            v80_fmt_image,\r\n            data_upgraded,\r\n            histogram\r\n          from sys.all_tab_columns\r\n      )\r\n      select\r\n          lower(column_name) as \"name\",\r\n          lower(data_type) as \"type\",\r\n          char_length as \"character_maximum_length\",\r\n          numeric_precision as \"numeric_precision\",\r\n          numeric_scale as \"numeric_scale\"\r\n      from columns\r\n      where table_name = upper('{{ relation.identifier }}')\r\n        {% if relation.schema %}\r\n        and table_schema = upper('{{ relation.schema }}')\r\n        {% endif %}\r\n        {% if relation.database %}\r\n        and table_catalog = upper('{{ relation.database }}')\r\n        {% endif %}\r\n      order by ordinal_position\r\n\r\n  {% endcall %}\r\n  {% set table = load_result('get_columns_in_relation').table %}\r\n  {{ return(sql_convert_columns_in_relation(table)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6170776}, "macro.dbt_oracle.oracle_escape_comment": {"unique_id": "macro.dbt_oracle.oracle_escape_comment", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle_escape_comment", "macro_sql": "{% macro oracle_escape_comment(comment) -%}\r\n  {% if comment is not string %}\r\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\r\n  {% endif %}\r\n  {%- set start_quote = \"q'<\" -%}\r\n  {%- set end_quote = \">'\" -%}\r\n  {%- if end_quote in comment -%}\r\n    {%- do exceptions.raise_compiler_error('The string ' ~ end_quote ~ ' is not allowed in comments.') -%}\r\n  {%- endif -%}\r\n  {{ start_quote }}{{ comment }}{{ end_quote }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6219764}, "macro.dbt_oracle.oracle__alter_relation_comment": {"unique_id": "macro.dbt_oracle.oracle__alter_relation_comment", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__alter_relation_comment", "macro_sql": "{% macro oracle__alter_relation_comment(relation, comment) %}\r\n  {% set escaped_comment = oracle_escape_comment(comment) %}\r\n  {# \"comment on table\" even for views #}\r\n  comment on table {{ relation.quote(schema=False, identifier=False) }} is {{ escaped_comment }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6219764}, "macro.dbt_oracle.oracle__persist_docs": {"unique_id": "macro.dbt_oracle.oracle__persist_docs", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__persist_docs", "macro_sql": "{% macro oracle__persist_docs(relation, model, for_relation, for_columns) -%}\r\n  {% if for_relation and config.persist_relation_docs() and model.description %}\r\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\r\n  {% endif %}\r\n  {% if for_columns and config.persist_column_docs() and model.columns %}\r\n    {% set column_dict = model.columns %}\r\n    {% for column_name in column_dict %}\r\n      {% set comment = column_dict[column_name]['description'] %}\r\n      {% set escaped_comment = oracle_escape_comment(comment) %}\r\n      {% call statement('alter _column comment', fetch_result=False) -%}\r\n        comment on column {{ relation.quote(schema=False, identifier=False) }}.{{ column_name }} is {{ escaped_comment }}\r\n      {%- endcall %}\r\n    {% endfor %}\r\n  {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt_oracle.oracle_escape_comment", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6219764}, "macro.dbt_oracle.oracle__alter_column_type": {"unique_id": "macro.dbt_oracle.oracle__alter_column_type", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__alter_column_type", "macro_sql": "{% macro oracle__alter_column_type(relation, column_name, new_column_type) -%}\r\n  {#\r\n    1. Create a new column (w/ temp name and correct type)\r\n    2. Copy data over to it\r\n    3. Drop the existing column (cascade!)\r\n    4. Rename the new column to existing column\r\n  #}\r\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\r\n\r\n  {% call statement('alter_column_type 1', fetch_result=False) %}\r\n    alter table {{ relation.quote(schema=False, identifier=False) }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }}\r\n  {% endcall %}\r\n  {% call statement('alter_column_type 2', fetch_result=False) %}\r\n    update {{ relation.quote(schema=False, identifier=False)  }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }}\r\n  {% endcall %}\r\n  {% call statement('alter_column_type 3', fetch_result=False) %}\r\n    alter table {{ relation.quote(schema=False, identifier=False) }} drop column {{ adapter.quote(column_name) }} cascade\r\n  {% endcall %}\r\n  {% call statement('alter_column_type 4', fetch_result=False) %}\r\n    rename column {{ relation.quote(schema=False, identifier=False) }}.{{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\r\n  {% endcall %}\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6268697}, "macro.dbt_oracle.oracle__drop_relation": {"unique_id": "macro.dbt_oracle.oracle__drop_relation", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\r\n  {% call statement('drop_relation', auto_begin=False) -%}\r\n   DECLARE\r\n     dne_942    EXCEPTION;\r\n     PRAGMA EXCEPTION_INIT(dne_942, -942);\r\n     attempted_ddl_on_in_use_GTT EXCEPTION;\r\n     pragma EXCEPTION_INIT(attempted_ddl_on_in_use_GTT, -14452);\r\n  BEGIN\r\n     SAVEPOINT start_transaction;\r\n     EXECUTE IMMEDIATE 'DROP {{ relation.type }} {{ relation.quote(schema=False, identifier=False) }} cascade constraint';\r\n     COMMIT;\r\n  EXCEPTION\r\n     WHEN attempted_ddl_on_in_use_GTT THEN\r\n        NULL; -- if it its a global temporary table, leave it alone.\r\n     WHEN dne_942 THEN\r\n        NULL;\r\n  END;\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6268697}, "macro.dbt_oracle.oracle__truncate_relation": {"unique_id": "macro.dbt_oracle.oracle__truncate_relation", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\r\n  {% call statement('truncate_relation') -%}\r\n    truncate table {{ relation.quote(schema=False, identifier=False) }}\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.631763}, "macro.dbt_oracle.oracle__rename_relation": {"unique_id": "macro.dbt_oracle.oracle__rename_relation", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__rename_relation", "macro_sql": "{% macro oracle__rename_relation(from_relation, to_relation) -%}\r\n  {% call statement('rename_relation') -%}\r\n    rename {{ from_relation.include(False, False, True).quote(schema=False, identifier=False) }} to {{ to_relation.include(False, False, True).quote(schema=False, identifier=False) }}\r\n  {%- endcall %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.631763}, "macro.dbt_oracle.oracle__information_schema_name": {"unique_id": "macro.dbt_oracle.oracle__information_schema_name", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__information_schema_name", "macro_sql": "{% macro oracle__information_schema_name(database) -%}\r\n  {% if database -%}\r\n    {{ adapter.verify_database(database) }}\r\n  {%- endif -%}\r\n  sys\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.631763}, "macro.dbt_oracle.oracle__list_schemas": {"unique_id": "macro.dbt_oracle.oracle__list_schemas", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__list_schemas", "macro_sql": "{% macro oracle__list_schemas(database) %}\r\n  {% if database -%}\r\n    {{ adapter.verify_database(database) }}\r\n  {%- endif -%}\r\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\r\n     \tselect lower(username) as \"name\"\r\n      from sys.all_users\r\n      order by username\r\n  {% endcall %}\r\n  {{ return(load_result('list_schemas').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.631763}, "macro.dbt_oracle.oracle__check_schema_exists": {"unique_id": "macro.dbt_oracle.oracle__check_schema_exists", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__check_schema_exists", "macro_sql": "{% macro oracle__check_schema_exists(information_schema, schema) -%}\r\n  {% if information_schema.database -%}\r\n    {{ adapter.verify_database(information_schema.database) }}\r\n  {%- endif -%}\r\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\r\n    select count(*) from sys.all_users where username = upper('{{ schema }}')\r\n  {% endcall %}\r\n  {{ return(load_result('check_schema_exists').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.631763}, "macro.dbt_oracle.oracle__list_relations_without_caching": {"unique_id": "macro.dbt_oracle.oracle__list_relations_without_caching", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__list_relations_without_caching", "macro_sql": "{% macro oracle__list_relations_without_caching(schema_relation) %}\r\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\r\n    with tables as\r\n      (select UPPER(SYS_CONTEXT('userenv', 'DB_NAME')) table_catalog,\r\n         UPPER(owner) table_schema,\r\n         table_name,\r\n         case\r\n           when iot_type = 'Y'\r\n           then 'IOT'\r\n           when temporary = 'Y'\r\n           then 'TEMP'\r\n           else 'BASE TABLE'\r\n         end table_type\r\n       from sys.all_tables\r\n       union all\r\n       select UPPER(SYS_CONTEXT('userenv', 'DB_NAME')),\r\n         UPPER(owner),\r\n         view_name,\r\n         'VIEW'\r\n       from sys.all_views\r\n  )\r\n  select lower(table_catalog) as \"database_name\"\r\n    ,lower(table_name) as \"name\"\r\n    ,lower(table_schema) as \"schema_name\"\r\n    ,case table_type\r\n      when 'BASE TABLE' then 'table'\r\n      when 'VIEW' then 'view'\r\n    end as \"kind\"\r\n  from tables\r\n  where table_type in ('BASE TABLE', 'VIEW')\r\n    and table_catalog = upper('{{ schema_relation.database }}')\r\n    and table_schema = upper('{{ schema_relation.schema }}')\r\n  {% endcall %}\r\n  {{ return(load_result('list_relations_without_caching').table) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6376414}, "macro.dbt_oracle.oracle__current_timestamp": {"unique_id": "macro.dbt_oracle.oracle__current_timestamp", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__current_timestamp", "macro_sql": "{% macro oracle__current_timestamp() -%}\r\n  CURRENT_TIMESTAMP\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6376414}, "macro.dbt_oracle.oracle__make_temp_relation": {"unique_id": "macro.dbt_oracle.oracle__make_temp_relation", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__make_temp_relation", "macro_sql": "{% macro oracle__make_temp_relation(base_relation, suffix) %}\r\n    {% set dt = modules.datetime.datetime.now() %}\r\n    {% set dtstring = dt.strftime(\"%H%M%S\") %}\r\n    {% set tmp_identifier = 'o$pt_' ~ base_relation.identifier ~ dtstring %}\r\n    {% set tmp_relation = base_relation.incorporate(\r\n                                path={\"identifier\": tmp_identifier}) -%}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.639126}, "macro.dbt_oracle.oracle__get_catalog": {"unique_id": "macro.dbt_oracle.oracle__get_catalog", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "oracle__get_catalog", "macro_sql": "{% macro oracle__get_catalog(information_schema, schemas) -%}\r\n\r\n  {%- call statement('catalog', fetch_result=True) -%}\r\n    {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n    {% set database = information_schema.database %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    with columns as (\r\n            select\r\n                SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\r\n                owner table_schema,\r\n                table_name,\r\n                column_name,\r\n                data_type,\r\n                data_type_mod,\r\n                decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\r\n                data_type_owner domain_schema,\r\n                data_length character_maximum_length,\r\n                data_length character_octet_length,\r\n                data_length,\r\n                data_precision numeric_precision,\r\n                data_scale numeric_scale,\r\n                nullable is_nullable,\r\n                column_id ordinal_position,\r\n                default_length,\r\n                data_default column_default,\r\n                num_distinct,\r\n                low_value,\r\n                high_value,\r\n                density,\r\n                num_nulls,\r\n                num_buckets,\r\n                last_analyzed,\r\n                sample_size,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\r\n                'SYS' character_set_schema,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\r\n                'SYS' collation_schema,\r\n                character_set_name,\r\n                char_col_decl_length,\r\n                global_stats,\r\n                user_stats,\r\n                avg_col_len,\r\n                char_length,\r\n                char_used,\r\n                v80_fmt_image,\r\n                data_upgraded,\r\n                histogram\r\n              from sys.all_tab_columns\r\n          ),\r\n          tables as\r\n                (select UPPER(SYS_CONTEXT('userenv', 'DB_NAME')) table_catalog,\r\n                   UPPER(owner) table_schema,\r\n                   table_name,\r\n                   case\r\n                     when iot_type = 'Y'\r\n                     then 'IOT'\r\n                     when temporary = 'Y'\r\n                     then 'TEMP'\r\n                     else 'BASE TABLE'\r\n                   end table_type\r\n                 from sys.all_tables\r\n                 union all\r\n                 select SYS_CONTEXT('userenv', 'DB_NAME'),\r\n                   owner,\r\n                   view_name,\r\n                   'VIEW'\r\n                 from sys.all_views\r\n          )\r\n          select\r\n              lower(tables.table_catalog) as \"table_database\",\r\n              lower(tables.table_schema) as \"table_schema\",\r\n              lower(tables.table_name) as \"table_name\",\r\n              lower(tables.table_type) as \"table_type\",\r\n              all_tab_comments.comments as \"table_comment\",\r\n              lower(columns.column_name) as \"column_name\",\r\n              ordinal_position as \"column_index\",\r\n              lower(case\r\n                when data_type like '%CHAR%'\r\n                then data_type || '(' || cast(char_length as varchar(10)) || ')'\r\n                else data_type\r\n              end) as \"column_type\",\r\n              all_col_comments.comments as \"column_comment\",\r\n              tables.table_schema as \"table_owner\"\r\n          from tables\r\n          inner join columns on columns.table_catalog = tables.table_catalog\r\n            and columns.table_schema = tables.table_schema\r\n            and columns.table_name = tables.table_name\r\n          left join all_tab_comments\r\n            on all_tab_comments.owner = tables.table_schema\r\n              and all_tab_comments.table_name = tables.table_name\r\n          left join all_col_comments\r\n            on all_col_comments.owner = columns.table_schema\r\n              and all_col_comments.table_name = columns.table_name\r\n              and all_col_comments.column_name = columns.column_name\r\n          where (\r\n              {%- for schema in schemas -%}\r\n                tables.table_schema = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n              {%- endfor -%}\r\n            )\r\n          order by\r\n              tables.table_schema,\r\n              tables.table_name,\r\n              ordinal_position\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('catalog').table) }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6440694}, "macro.dbt_oracle.oracle__test_accepted_values": {"unique_id": "macro.dbt_oracle.oracle__test_accepted_values", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\schema_tests.sql", "original_file_path": "macros\\schema_tests.sql", "name": "oracle__test_accepted_values", "macro_sql": "{% macro oracle__test_accepted_values(model, column_name, values, quote=True) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model.include(False, True, True) }}\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        value_field\r\n\r\n    from all_values\r\n    where value_field not in (\r\n        {% for value in values -%}\r\n            {% if quote -%}\r\n            '{{ value }}'\r\n            {%- else -%}\r\n            {{ value }}\r\n            {%- endif -%}\r\n            {%- if not loop.last -%},{%- endif %}\r\n        {%- endfor %}\r\n    )\r\n)\r\n\r\nselect * from(\r\n    select count(*) as not_accepted_values from validation_errors\r\n                 ) c where c.not_accepted_values != 0\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.648025}, "macro.dbt_oracle.oracle__test_not_null": {"unique_id": "macro.dbt_oracle.oracle__test_not_null", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\schema_tests.sql", "original_file_path": "macros\\schema_tests.sql", "name": "oracle__test_not_null", "macro_sql": "{% macro oracle__test_not_null(model, column_name) %}\r\n\r\nselect * from (\r\nselect count(*) as null_count\r\nfrom {{ model.include(False, True, True) }}\r\nwhere {{ column_name }} is null) c where c.null_count != 0\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6490128}, "macro.dbt_oracle.oracle__test_relationships": {"unique_id": "macro.dbt_oracle.oracle__test_relationships", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\schema_tests.sql", "original_file_path": "macros\\schema_tests.sql", "name": "oracle__test_relationships", "macro_sql": "{% macro oracle__test_relationships(model, column_name, to, field) %}\r\n\r\nselect * from (\r\nselect count(*) as validation_errors\r\nfrom (\r\n    select {{ column_name }} as id from {{ model }}\r\n) child\r\nleft join (\r\n    select {{ field }} as id from {{ to }}\r\n) parent on parent.id = child.id\r\nwhere child.id is not null\r\n  and parent.id is null) c where c.validation_errors != 0\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6490128}, "macro.dbt_oracle.oracle_incremental_upsert_backup": {"unique_id": "macro.dbt_oracle.oracle_incremental_upsert_backup", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "oracle_incremental_upsert_backup", "macro_sql": "{% macro oracle_incremental_upsert_backup(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='name') | join(', ') -%}\r\n\r\n    {%- if unique_key is not none -%}\r\n    delete\r\n    from {{ target_relation }}\r\n    where ({{ unique_key }}) in (\r\n        select ({{ unique_key }})\r\n        from {{ tmp_relation }}\r\n    );\r\n    {%- endif %}\r\n\r\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       select {{ dest_cols_csv }}\r\n       from {{ tmp_relation }}\r\n    )\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6549337}, "macro.dbt_oracle.oracle_incremental_upsert": {"unique_id": "macro.dbt_oracle.oracle_incremental_upsert", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "oracle_incremental_upsert", "macro_sql": "{% macro oracle_incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\r\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\r\n    {%- set dest_cols_csv = dest_columns | map(attribute='name') | join(', ') -%}\r\n\r\n    {%- if unique_key is not none -%}\r\n    merge into {{ target_relation }} target\r\n      using {{ tmp_relation }} temp\r\n      on (temp.{{ unique_key }} = target.{{ unique_key }})\r\n    when matched then\r\n      update set\r\n      {% for col in dest_columns if col.name != unique_key %}\r\n        target.{{ col.name }} = temp.{{ col.name }}\r\n        {% if not loop.last %}, {% endif %}\r\n      {% endfor %}\r\n    when not matched then\r\n      insert( {{ dest_cols_csv }} )\r\n      values(\r\n        {% for col in dest_columns %}\r\n          temp.{{ col.name }}\r\n          {% if not loop.last %}, {% endif %}\r\n        {% endfor %}\r\n      )\r\n    {%- else %}\r\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\r\n    (\r\n       select {{ dest_cols_csv }}\r\n       from {{ tmp_relation }}\r\n    )\r\n    {% endif %}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6578896}, "macro.dbt_oracle.materialization_incremental_oracle": {"unique_id": "macro.dbt_oracle.materialization_incremental_oracle", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_oracle", "macro_sql": "{% materialization incremental, adapter='oracle' %}\r\n\r\n  {% set unique_key = config.get('unique_key') %}\r\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\r\n\r\n  {% set target_relation = this.incorporate(type='table') %}\r\n  {% set existing_relation = load_relation(this) %}\r\n  {% set tmp_relation = make_temp_relation(this) %}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set to_drop = [] %}\r\n  {% if existing_relation is none %}\r\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\r\n  {% elif existing_relation.is_view or full_refresh_mode %}\r\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\r\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\r\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\r\n      {% do adapter.drop_relation(backup_relation) %}\r\n\r\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\r\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\r\n      {% do to_drop.append(backup_relation) %}\r\n  {% else %}\r\n      {% set tmp_relation = make_temp_relation(target_relation) %}\r\n      {% do to_drop.append(tmp_relation) %}\r\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\r\n      {% do adapter.expand_target_column_types(\r\n             from_relation=tmp_relation,\r\n             to_relation=target_relation) %}\r\n      {% set build_sql = oracle_incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\r\n  {% endif %}\r\n\r\n  {% call statement(\"main\") %}\r\n      {{ build_sql }}\r\n  {% endcall %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  -- `COMMIT` happens here\r\n  {% do adapter.commit() %}\r\n\r\n  {% for rel in to_drop %}\r\n      {% do adapter.drop_relation(rel) %}\r\n  {% endfor %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_oracle.oracle_incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6672857}, "macro.dbt_oracle.oracle_basic_load_csv_rows": {"unique_id": "macro.dbt_oracle.oracle_basic_load_csv_rows", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "oracle_basic_load_csv_rows", "macro_sql": "{% macro oracle_basic_load_csv_rows(model, batch_size, agate_table) %}\r\n\r\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\r\n    {% set bindings = [] %}\r\n\r\n    {% set statements = [] %}\r\n\r\n    {% for chunk in agate_table.rows | batch(batch_size) %}\r\n        {% set bindings = [] %}\r\n\r\n        {% for row in chunk %}\r\n            {% do bindings.extend(row) %}\r\n        {% endfor %}\r\n\r\n        {% set sql %}\r\n            insert all\r\n            {% for row in chunk -%}\r\n              into {{ this.render() }} ({{ cols_sql }}) values(\r\n                {%- for column in agate_table.column_names -%}\r\n                    :p{{ loop.index }}\r\n                    {%- if not loop.last%},{%- endif %}\r\n                {%- endfor %})\r\n            {% endfor %}\r\n            select * from dual\r\n        {% endset %}\r\n\r\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\r\n\r\n        {% if loop.index0 == 0 %}\r\n            {% do statements.append(sql) %}\r\n        {% endif %}\r\n    {% endfor %}\r\n\r\n    {# Return SQL so we can render it out into the compiled files #}\r\n    {{ return(statements[0]) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.673202}, "macro.dbt_oracle.oracle__load_csv_rows": {"unique_id": "macro.dbt_oracle.oracle__load_csv_rows", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "oracle__load_csv_rows", "macro_sql": "{% macro oracle__load_csv_rows(model, agate_table) %}\r\n  {{ return(oracle_basic_load_csv_rows(model, 100, agate_table) )}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle_basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.6741886}, "macro.dbt_oracle.create_columns": {"unique_id": "macro.dbt_oracle.create_columns", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\r\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7094276}, "macro.dbt_oracle.default__create_columns": {"unique_id": "macro.dbt_oracle.default__create_columns", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\r\n  {% for column in columns %}\r\n    {% call statement() %}\r\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\r\n    {% endcall %}\r\n  {% endfor %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7143204}, "macro.dbt_oracle.post_snapshot": {"unique_id": "macro.dbt_oracle.post_snapshot", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\r\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7143204}, "macro.dbt_oracle.default__post_snapshot": {"unique_id": "macro.dbt_oracle.default__post_snapshot", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\r\n    {# no-op #}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7143204}, "macro.dbt_oracle.snapshot_staging_table": {"unique_id": "macro.dbt_oracle.snapshot_staging_table", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\r\n\r\n    with snapshot_query as (\r\n\r\n        {{ source_sql }}\r\n\r\n    ),\r\n\r\n    snapshotted_data as (\r\n\r\n        select {{ target_relation.quote(schema=False, identifier=False) }}.*,\r\n            {{ strategy.unique_key }} as dbt_unique_key\r\n\r\n        from {{ target_relation.quote(schema=False, identifier=False) }}\r\n        where dbt_valid_to is null\r\n\r\n    ),\r\n\r\n    insertions_source_data as (\r\n\r\n        select\r\n            snapshot_query.*,\r\n            {{ strategy.unique_key }} as dbt_unique_key,\r\n            {{ strategy.updated_at }} as dbt_updated_at,\r\n            {{ strategy.updated_at }} as dbt_valid_from,\r\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\r\n            {{ strategy.scd_id }} as dbt_scd_id\r\n\r\n        from snapshot_query\r\n    ),\r\n\r\n    updates_source_data as (\r\n\r\n        select\r\n            snapshot_query.*,\r\n            {{ strategy.unique_key }} as dbt_unique_key,\r\n            {{ strategy.updated_at }} as dbt_updated_at,\r\n            {{ strategy.updated_at }} as dbt_valid_from,\r\n            {{ strategy.updated_at }} as dbt_valid_to\r\n\r\n        from snapshot_query\r\n    ),\r\n\r\n    {%- if strategy.invalidate_hard_deletes %}\r\n\r\n    deletes_source_data as (\r\n\r\n        select\r\n            snapshot_query.*,\r\n            {{ strategy.unique_key }} as dbt_unique_key\r\n        from snapshot_query\r\n    ),\r\n    {% endif %}\r\n\r\n    insertions as (\r\n\r\n        select\r\n            'insert' as dbt_change_type,\r\n            source_data.*\r\n\r\n        from insertions_source_data source_data\r\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where snapshotted_data.dbt_unique_key is null\r\n           or (\r\n                snapshotted_data.dbt_unique_key is not null\r\n            and (\r\n                {{ strategy.row_changed }}\r\n            )\r\n        )\r\n\r\n    ),\r\n\r\n    updates as (\r\n\r\n        select\r\n            'update' as dbt_change_type,\r\n            source_data.*,\r\n            snapshotted_data.dbt_scd_id\r\n\r\n        from updates_source_data source_data\r\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where (\r\n            {{ strategy.row_changed }}\r\n        )\r\n    )\r\n\r\n    {%- if strategy.invalidate_hard_deletes -%}\r\n    ,\r\n\r\n    deletes as (\r\n\r\n        select\r\n            'delete' as dbt_change_type,\r\n            source_data.*,\r\n            {{ snapshot_get_time() }} as dbt_valid_from,\r\n            {{ snapshot_get_time() }} as dbt_updated_at,\r\n            {{ snapshot_get_time() }} as dbt_valid_to,\r\n            snapshotted_data.dbt_scd_id\r\n\r\n        from snapshotted_data\r\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\r\n        where source_data.dbt_unique_key is null\r\n    )\r\n    {%- endif %}\r\n\r\n    select * from insertions\r\n    union all\r\n    select * from updates\r\n    {%- if strategy.invalidate_hard_deletes %}\r\n    union all\r\n    select * from deletes\r\n    {%- endif %}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7143204}, "macro.dbt_oracle.build_snapshot_table": {"unique_id": "macro.dbt_oracle.build_snapshot_table", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\r\n\r\n    select sbq.*,\r\n        {{ strategy.scd_id }} as dbt_scd_id,\r\n        {{ strategy.updated_at }} as dbt_updated_at,\r\n        {{ strategy.updated_at }} as dbt_valid_from,\r\n        cast(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as DATE) as dbt_valid_to\r\n    from (\r\n        {{ sql }}\r\n    ) sbq\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7192128}, "macro.dbt_oracle.get_or_create_relation": {"unique_id": "macro.dbt_oracle.get_or_create_relation", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\r\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\r\n\r\n  {% if target_relation %}\r\n    {% do return([true, target_relation]) %}\r\n  {% endif %}\r\n\r\n  {%- set new_relation = api.Relation.create(\r\n      database=database,\r\n      schema=schema,\r\n      identifier=identifier,\r\n      type=type\r\n  ) -%}\r\n  {% do return([false, new_relation]) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7192128}, "macro.dbt_oracle.build_snapshot_staging_table": {"unique_id": "macro.dbt_oracle.build_snapshot_staging_table", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n    {% set tmp_relation = make_temp_relation(target_relation) %}\r\n\r\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n    {% call statement('build_snapshot_staging_relation') %}\r\n        {{ create_table_as(True, tmp_relation, select) }}\r\n    {% endcall %}\r\n\r\n    {% do return(tmp_relation) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt_oracle.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7192128}, "macro.dbt_oracle.materialization_snapshot_oracle": {"unique_id": "macro.dbt_oracle.materialization_snapshot_oracle", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_oracle", "macro_sql": "{% materialization snapshot, adapter='oracle' %}\r\n  {%- set config = model['config'] -%}\r\n\r\n  {%- set target_table = model.get('alias', model.get('name')) -%}\r\n\r\n  {%- set strategy_name = config.get('strategy') -%}\r\n  {%- set unique_key = config.get('unique_key') %}\r\n\r\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\r\n    {% do create_schema(model.database, model.schema) %}\r\n  {% endif %}\r\n\r\n  {% set target_relation_exists, target_relation = get_or_create_relation(\r\n          database=model.database,\r\n          schema=model.schema,\r\n          identifier=target_table,\r\n          type='table') -%}\r\n\r\n  {%- if not target_relation.is_table -%}\r\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\r\n  {%- endif -%}\r\n\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\r\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\r\n\r\n  {% if not target_relation_exists %}\r\n\r\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\r\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\r\n\r\n  {% else %}\r\n\r\n      {{ adapter.valid_snapshot_target(target_relation) }}\r\n\r\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\r\n\r\n      -- this may no-op if the database does not require column expansion\r\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\r\n                                               to_relation=target_relation) %}\r\n\r\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\r\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\r\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\r\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\r\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\r\n                                   | list %}\r\n\r\n      {% do create_columns(target_relation, missing_columns) %}\r\n\r\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\r\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\r\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\r\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\r\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\r\n                                   | list %}\r\n\r\n      {% set quoted_source_columns = [] %}\r\n      {% for column in source_columns %}\r\n        {% do quoted_source_columns.append(column.name) %}\r\n      {% endfor %}\r\n\r\n      {% set final_sql = snapshot_merge_sql(\r\n            target = target_relation,\r\n            source = staging_table,\r\n            insert_cols = quoted_source_columns\r\n         )\r\n      %}\r\n\r\n  {% endif %}\r\n\r\n  {% call statement('main') %}\r\n      {{ final_sql }}\r\n  {% endcall %}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {% if staging_table is defined %}\r\n      {% do post_snapshot(staging_table) %}\r\n  {% endif %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt_oracle.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt_oracle.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_oracle.build_snapshot_staging_table", "macro.dbt_oracle.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_oracle.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7338896}, "macro.dbt_oracle.oracle__snapshot_hash_arguments": {"unique_id": "macro.dbt_oracle.oracle__snapshot_hash_arguments", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "oracle__snapshot_hash_arguments", "macro_sql": "{% macro oracle__snapshot_hash_arguments(args) -%}\r\n    ORA_HASH({%- for arg in args -%}\r\n        coalesce(cast({{ arg }} as varchar(50) ), '')\r\n        {% if not loop.last %} || '|' || {% endif %}\r\n    {%- endfor -%})\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7338896}, "macro.dbt_oracle.oracle__snapshot_string_as_time": {"unique_id": "macro.dbt_oracle.oracle__snapshot_string_as_time", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "oracle__snapshot_string_as_time", "macro_sql": "{% macro oracle__snapshot_string_as_time(timestamp) -%}\r\n    {%- set result = \"TO_TIMESTAMP('\"~ timestamp ~ \"','yyyy/mm/dd hh24:mi:ss.FF')\" -%}\r\n    {{ return(result) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7338896}, "macro.dbt_oracle.oracle__snapshot_merge_sql": {"unique_id": "macro.dbt_oracle.oracle__snapshot_merge_sql", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "oracle__snapshot_merge_sql", "macro_sql": "{% macro oracle__snapshot_merge_sql(target, source, insert_cols) -%}\r\n    {%- set insert_cols_csv = [] -%}\r\n\r\n    {% for column in insert_cols %}\r\n      {% do insert_cols_csv.append(\"s.\" + column) %}\r\n    {% endfor %}\r\n\r\n    {%- set dest_cols_csv = [] -%}\r\n\r\n    {% for column in insert_cols %}\r\n      {% do dest_cols_csv.append(\"d.\" + column) %}\r\n    {% endfor %}\r\n\r\n    merge into {{ target.quote(schema=False, identifier=False) }} d\r\n    using {{ source.quote(schema=False, identifier=False) }} s\r\n    on (s.dbt_scd_id = d.dbt_scd_id)\r\n\r\n    when matched\r\n        then update\r\n        set dbt_valid_to = s.dbt_valid_to\r\n        where d.dbt_valid_to is null\r\n          and s.dbt_change_type in ('update', 'delete')\r\n    when not matched\r\n        then insert ({{ dest_cols_csv | join(', ') }})\r\n        values ({{ insert_cols_csv | join(', ') }})\r\n        where s.dbt_change_type = 'insert'\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.738781}, "macro.dbt_oracle.snapshot_check_strategy": {"unique_id": "macro.dbt_oracle.snapshot_check_strategy", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\r\n    {% set check_cols_config = config['check_cols'] %}\r\n    {% set primary_key = config['unique_key'] %}\r\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\r\n\r\n    {% set select_current_time -%}\r\n        select {{ snapshot_get_time() }} FROM dual\r\n    {%- endset %}\r\n\r\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\r\n    {%- set now = run_query(select_current_time)[0][0] -%}\r\n    {% if now is none or now is undefined -%}\r\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\r\n    {%- endif %}\r\n    {% set updated_at = snapshot_string_as_time(now) %}\r\n\r\n    {% set column_added = false %}\r\n\r\n    {% if check_cols_config == 'all' %}\r\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\r\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\r\n        {% set check_cols = check_cols_config %}\r\n    {% else %}\r\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\r\n    {% endif %}\r\n\r\n    {%- set row_changed_expr -%}\r\n    (\r\n    {%- if column_added -%}\r\n        TRUE\r\n    {%- else -%}\r\n    {%- for col in check_cols -%}\r\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\r\n        or\r\n        (\r\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\r\n            or\r\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\r\n        )\r\n        {%- if not loop.last %} or {% endif -%}\r\n    {%- endfor -%}\r\n    {%- endif -%}\r\n    )\r\n    {%- endset %}\r\n\r\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\r\n\r\n    {% do return({\r\n        \"unique_key\": primary_key,\r\n        \"updated_at\": updated_at,\r\n        \"row_changed\": row_changed_expr,\r\n        \"scd_id\": scd_id_expr,\r\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\r\n    }) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt_oracle.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7485645}, "macro.dbt_oracle.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt_oracle.snapshot_check_all_get_existing_columns", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\r\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\r\n    {%- if not target_exists -%}\r\n        {# no table yet -> return whatever the query does #}\r\n        {{ return([false, query_columns]) }}\r\n    {%- endif -%}\r\n    {# handle any schema changes #}\r\n    {%- set target_table = node.get('alias', node.get('name')) -%}\r\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\r\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation.quote(schema=False, identifier=False)) -%}\r\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\r\n    {%- set ns.column_added = false -%}\r\n\r\n    {%- set intersection = [] -%}\r\n    {%- for col in query_columns -%}\r\n        {%- if col in existing_cols -%}\r\n            {%- do intersection.append(col) -%}\r\n        {%- else -%}\r\n            {% set ns.column_added = true %}\r\n        {%- endif -%}\r\n    {%- endfor -%}\r\n    {{ return([ns.column_added, intersection]) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7534568}, "macro.dbt_oracle.materialization_table_oracle": {"unique_id": "macro.dbt_oracle.materialization_table_oracle", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\table\\table.sql", "original_file_path": "macros\\materializations\\table\\table.sql", "name": "materialization_table_oracle", "macro_sql": "{% materialization table, adapter='oracle' %}\r\n  {% set identifier = model['alias'] %}\r\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\r\n  {% set backup_identifier = model['name'] + '__dbt_backup' %}\r\n\r\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\r\n  {% set target_relation = api.Relation.create(identifier=identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type='table') %}\r\n  {% set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema,\r\n                                                      database=database,\r\n                                                      type='table') %}\r\n  -- the intermediate_relation should not already exist in the database; get_relation\r\n  -- will return None in that case. Otherwise, we get a relation that we can drop\r\n  -- later, before we try to use this name for the current operation\r\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\r\n                                                                   schema=schema,\r\n                                                                   database=database) %}\r\n  /*\r\n      See ../view/view.sql for more information about this relation.\r\n  */\r\n  {% set backup_relation_type = 'table' if old_relation is none else old_relation.type %}\r\n  {% set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema,\r\n                                                database=database,\r\n                                                type=backup_relation_type) %}\r\n  -- as above, the backup_relation should not already exist\r\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\r\n                                                             schema=schema,\r\n                                                             database=database) %}\r\n\r\n\r\n    {% do log(\"Preexisting intermediate relation=\" ~ preexisting_intermediate_relation) %}\r\n    {% do log(\"Preexisting backup relation=\" ~ preexisting_backup_relation) %}\r\n\r\n\r\n  -- drop the temp relations if they exist already in the database\r\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') %}\r\n    {{ create_table_as(False, intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- cleanup\r\n  {% if old_relation is not none %}\r\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\r\n  {% endif %}\r\n\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {% do create_indexes(target_relation) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  -- `COMMIT` happens here\r\n  {{ adapter.commit() }}\r\n\r\n  -- finally, drop the existing/backup relation after the commit\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7681363}, "macro.dbt_oracle.get_test_sql": {"unique_id": "macro.dbt_oracle.get_test_sql", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\r\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7681363}, "macro.dbt_oracle.oracle__get_test_sql": {"unique_id": "macro.dbt_oracle.oracle__get_test_sql", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "oracle__get_test_sql", "macro_sql": "{% macro oracle__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\r\n    select\r\n      {{ fail_calc }} as failures,\r\n      case when {{ fail_calc }} {{ warn_if }} then 1 else 0 end as should_warn,\r\n      case when {{ fail_calc }} {{ error_if }} then 1 else 0 end as should_error\r\n    from (\r\n      {{ main_sql }}\r\n      {{ \"limit \" ~ limit if limit != none }}\r\n    ) dbt_internal_test\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7681363}, "macro.dbt_oracle.materialization_view_oracle": {"unique_id": "macro.dbt_oracle.materialization_view_oracle", "package_name": "dbt_oracle", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\view\\view.sql", "original_file_path": "macros\\materializations\\view\\view.sql", "name": "materialization_view_oracle", "macro_sql": "\r\n{%- materialization view, adapter='oracle' -%}\r\n\r\n  {%- set identifier = model['alias'] -%}\r\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\r\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\r\n\r\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\r\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\r\n                                                type='view') -%}\r\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\r\n                                                      schema=schema, database=database, type='view') -%}\r\n  -- the intermediate_relation should not already exist in the database; get_relation\r\n  -- will return None in that case. Otherwise, we get a relation that we can drop\r\n  -- later, before we try to use this name for the current operation\r\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\r\n                                                                   schema=schema,\r\n                                                                   database=database) -%}\r\n  /*\r\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\r\n     a previous run, and we're going to try to drop it immediately. At the end of this\r\n     materialization, we're going to rename the \"old_relation\" to this identifier,\r\n     and then we're going to drop it. In order to make sure we run the correct one of:\r\n       - drop view ...\r\n       - drop table ...\r\n\r\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\r\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\r\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\r\n     this relation will be effectively unused.\r\n  */\r\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\r\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\r\n                                                schema=schema, database=database,\r\n                                                type=backup_relation_type) -%}\r\n  -- as above, the backup_relation should not already exist\r\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\r\n                                                             schema=schema,\r\n                                                             database=database) -%}\r\n\r\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\r\n\r\n  -- drop the temp relations if they exist already in the database\r\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\r\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\r\n\r\n  -- `BEGIN` happens here:\r\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\r\n\r\n  -- build model\r\n  {% call statement('main') -%}\r\n    {{ create_view_as(intermediate_relation, sql) }}\r\n  {%- endcall %}\r\n\r\n  -- cleanup\r\n  -- move the existing view out of the way\r\n  {% if old_relation is not none %}\r\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\r\n  {% endif %}\r\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\r\n\r\n  {% do persist_docs(target_relation, model) %}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\r\n\r\n  {{ adapter.commit() }}\r\n\r\n  {{ drop_relation_if_exists(backup_relation) }}\r\n\r\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\r\n\r\n  {{ return({'relations': [target_relation]}) }}\r\n\r\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7779202}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7877064}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7877064}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7877064}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7877064}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7877064}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7877064}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7926035}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7926035}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7926035}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7974975}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7974975}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7974975}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.7974975}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8023884}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8023884}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8023884}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8023884}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8072793}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8072793}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.812171}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8170636}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8170636}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8170636}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8170636}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8170636}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8219566}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8219566}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8268492}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8268492}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8268492}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.831742}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.831742}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.831742}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.831742}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.831742}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.831742}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8366375}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8366375}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8366375}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8366375}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8366375}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8366375}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.84153}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8464272}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8513222}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8513222}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8513222}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8562164}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.861111}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.861111}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.861111}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.861111}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8660052}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8660052}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8660052}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8660052}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8708987}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8708987}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8708987}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8708987}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.875791}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.875791}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.875791}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.875791}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.880686}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.880686}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.880686}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.880686}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.880686}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8855836}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8855836}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.8904781}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9100652}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9100652}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.919858}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9242668}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9242668}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.92916}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.92916}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9340603}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9536452}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9585574}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9634542}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.968352}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.968352}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.968352}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.968352}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.968352}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9830277}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9879224}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9879224}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9879224}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9879224}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9879224}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9928124}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501623.9928124}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0025954}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.017275}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.017275}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.017275}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0221684}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0221684}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0221684}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0221684}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0221684}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0221684}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.027062}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.027062}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0368485}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0466363}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0466363}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0515294}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0515294}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0515294}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0515294}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0564291}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0564291}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt_oracle.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0564291}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt_oracle.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt_oracle.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_oracle.build_snapshot_staging_table", "macro.dbt_oracle.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt_oracle.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0760021}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0760021}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0808945}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0906777}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0906777}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0906777}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0906777}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0906777}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0955696}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0955696}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0955696}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.0955696}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt_oracle.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1053543}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1053543}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1053543}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_oracle.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1151383}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1151383}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1151383}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1200306}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1200306}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1200306}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1651501624.1200306}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\users\\ra_p157554\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dmx_poc.stg_dim_naering": ["source.dmx_poc.dmx_pox_oppfolging.DIM_NAERING"], "model.dmx_poc.stg_dim_organisasjon": ["source.dmx_poc.dmx_pox_oppfolging.DIM_ORG"], "model.dmx_poc.stg_dim_person1": ["source.dmx_poc.dmx_poc_person.DIM_PERSON1"], "model.dmx_poc.stg_dim_tid": ["source.dmx_poc.dmx_pox_oppfolging.DIM_TID"], "model.dmx_poc.stg_dim_varighet": ["source.dmx_poc.dmx_pox_oppfolging.DIM_VARIGHET"], "model.dmx_poc.stg_fk_isdialogmote_dm2": ["source.dmx_poc.dmx_pox_dialogmote.FK_ISDIALOGMOTE_DM2"], "model.dmx_poc.fak_syfo_dialogmote": ["model.dmx_poc.fak_syfo_oppfolging_pvt", "model.dmx_poc.stg_dim_person1"], "model.dmx_poc.fak_syfo_dialogmote_org": ["model.dmx_poc.fak_syfo_dialogmote", "model.dmx_poc.stg_dim_organisasjon"], "model.dmx_poc.fak_syfo_dialogmote_tid": ["model.dmx_poc.fak_syfo_dialogmote_org"], "model.dmx_poc.fak_syfo_oppfolging_pvt": ["model.dmx_poc.stg_fk_isdialogmote_dm2"], "model.dmx_poc.fak_syfo_dt_dialogmote": ["model.dmx_poc.fak_syfo_dialogmote_tid", "model.dmx_poc.stg_dim_varighet"], "model.dmx_poc.test__ssb_syfra_teller_kv": ["source.dmx_poc.dvh_syfra.ssb_syfra_teller_kv"], "test.dmx_poc.gj_uforg_har_maks_ti_desimaler": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.gj_uforg_mellom_0.2_og_1": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.ikke_overlappende_s_start_og_s_slutt": ["model.dmx_poc.test__ssb_syfra_teller_kv", "model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.person_ikke_kode67": ["model.dmx_poc.test__ssb_syfra_teller_kv", "source.dmx_poc.dt_person.dvh_person_ident_off_id"], "test.dmx_poc.s_start_mindre_enn_s_stopp": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.unique_stg_dim_tid_pk_dim_tid.9af26546a8": ["model.dmx_poc.stg_dim_tid"], "test.dmx_poc.not_null_stg_dim_tid_pk_dim_tid.ea50fe126d": ["model.dmx_poc.stg_dim_tid"], "test.dmx_poc.unique_stg_dim_person1_pk_dim_person.fdad0d3d85": ["model.dmx_poc.stg_dim_person1"], "test.dmx_poc.not_null_stg_dim_person1_pk_dim_person.2be0fa03d8": ["model.dmx_poc.stg_dim_person1"], "test.dmx_poc.unique_stg_dim_organisasjon_ek_org_node.c2509c6475": ["model.dmx_poc.stg_dim_organisasjon"], "test.dmx_poc.not_null_stg_dim_organisasjon_ek_org_node.060b25a47b": ["model.dmx_poc.stg_dim_organisasjon"], "test.dmx_poc.unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.1b2b6a4684": ["model.dmx_poc.fak_syfo_oppfolging_pvt"], "test.dmx_poc.not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.e263e7e8f6": ["model.dmx_poc.fak_syfo_oppfolging_pvt"], "test.dmx_poc.unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.8fc1a50384": ["model.dmx_poc.fak_syfo_dialogmote"], "test.dmx_poc.not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.749aaed806": ["model.dmx_poc.fak_syfo_dialogmote"], "test.dmx_poc.unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.3f580129c1": ["model.dmx_poc.fak_syfo_dialogmote_org"], "test.dmx_poc.not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.b624588c88": ["model.dmx_poc.fak_syfo_dialogmote_org"], "test.dmx_poc.unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.921d124218": ["model.dmx_poc.fak_syfo_dt_dialogmote"], "test.dmx_poc.not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.40a8d9e19a": ["model.dmx_poc.fak_syfo_dt_dialogmote"], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_start.8747613d8a": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_stopp.4f1075fe39": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_fnr.04091e79e4": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_gj_uforg.9046d951e1": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_start.b5c1d4a070": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_slutt.e95b185a90": ["model.dmx_poc.test__ssb_syfra_teller_kv"], "source.dmx_poc.dmx_pox_dialogmote.FK_ISDIALOGMOTE_DM2": [], "source.dmx_poc.dmx_pox_oppfolging.FAK_SF_OPPFOLGING_D2_MND": [], "source.dmx_poc.dmx_pox_oppfolging.DIM_TID": [], "source.dmx_poc.dmx_pox_oppfolging.DIM_ORG": [], "source.dmx_poc.dmx_pox_oppfolging.DIM_VARIGHET": [], "source.dmx_poc.dmx_pox_oppfolging.DIM_NAERING": [], "source.dmx_poc.dmx_poc_person.DIM_PERSON1": [], "source.dmx_poc.dt_person.dvh_person_ident_off_id": [], "source.dmx_poc.dvh_syfra.ssb_syfra_teller_kv": []}, "child_map": {"model.dmx_poc.stg_dim_naering": [], "model.dmx_poc.stg_dim_organisasjon": ["model.dmx_poc.fak_syfo_dialogmote_org", "test.dmx_poc.not_null_stg_dim_organisasjon_ek_org_node.060b25a47b", "test.dmx_poc.unique_stg_dim_organisasjon_ek_org_node.c2509c6475"], "model.dmx_poc.stg_dim_person1": ["model.dmx_poc.fak_syfo_dialogmote", "test.dmx_poc.not_null_stg_dim_person1_pk_dim_person.2be0fa03d8", "test.dmx_poc.unique_stg_dim_person1_pk_dim_person.fdad0d3d85"], "model.dmx_poc.stg_dim_tid": ["test.dmx_poc.not_null_stg_dim_tid_pk_dim_tid.ea50fe126d", "test.dmx_poc.unique_stg_dim_tid_pk_dim_tid.9af26546a8"], "model.dmx_poc.stg_dim_varighet": ["model.dmx_poc.fak_syfo_dt_dialogmote"], "model.dmx_poc.stg_fk_isdialogmote_dm2": ["model.dmx_poc.fak_syfo_oppfolging_pvt"], "model.dmx_poc.fak_syfo_dialogmote": ["model.dmx_poc.fak_syfo_dialogmote_org", "test.dmx_poc.not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.749aaed806", "test.dmx_poc.unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.8fc1a50384"], "model.dmx_poc.fak_syfo_dialogmote_org": ["model.dmx_poc.fak_syfo_dialogmote_tid", "test.dmx_poc.not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.b624588c88", "test.dmx_poc.unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.3f580129c1"], "model.dmx_poc.fak_syfo_dialogmote_tid": ["model.dmx_poc.fak_syfo_dt_dialogmote"], "model.dmx_poc.fak_syfo_oppfolging_pvt": ["model.dmx_poc.fak_syfo_dialogmote", "test.dmx_poc.not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.e263e7e8f6", "test.dmx_poc.unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.1b2b6a4684"], "model.dmx_poc.fak_syfo_dt_dialogmote": ["test.dmx_poc.not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.40a8d9e19a", "test.dmx_poc.unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.921d124218"], "model.dmx_poc.test__ssb_syfra_teller_kv": ["test.dmx_poc.gj_uforg_har_maks_ti_desimaler", "test.dmx_poc.gj_uforg_mellom_0.2_og_1", "test.dmx_poc.ikke_overlappende_s_start_og_s_slutt", "test.dmx_poc.ikke_overlappende_s_start_og_s_slutt", "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_fnr.04091e79e4", "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_gj_uforg.9046d951e1", "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_slutt.e95b185a90", "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_start.b5c1d4a070", "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_start.8747613d8a", "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_stopp.4f1075fe39", "test.dmx_poc.person_ikke_kode67", "test.dmx_poc.s_start_mindre_enn_s_stopp", "test.dmx_poc.s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt"], "test.dmx_poc.gj_uforg_har_maks_ti_desimaler": [], "test.dmx_poc.gj_uforg_mellom_0.2_og_1": [], "test.dmx_poc.ikke_overlappende_s_start_og_s_slutt": [], "test.dmx_poc.person_ikke_kode67": [], "test.dmx_poc.s_start_mindre_enn_s_stopp": [], "test.dmx_poc.s_stopp_mindre_enn_fjorten_mnd_etter_p_slutt": [], "test.dmx_poc.unique_stg_dim_tid_pk_dim_tid.9af26546a8": [], "test.dmx_poc.not_null_stg_dim_tid_pk_dim_tid.ea50fe126d": [], "test.dmx_poc.unique_stg_dim_person1_pk_dim_person.fdad0d3d85": [], "test.dmx_poc.not_null_stg_dim_person1_pk_dim_person.2be0fa03d8": [], "test.dmx_poc.unique_stg_dim_organisasjon_ek_org_node.c2509c6475": [], "test.dmx_poc.not_null_stg_dim_organisasjon_ek_org_node.060b25a47b": [], "test.dmx_poc.unique_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.1b2b6a4684": [], "test.dmx_poc.not_null_fak_syfo_oppfolging_pvt_DIALOGMOTE_UUID.e263e7e8f6": [], "test.dmx_poc.unique_fak_syfo_dialogmote_DIALOGMOTE_UUID.8fc1a50384": [], "test.dmx_poc.not_null_fak_syfo_dialogmote_DIALOGMOTE_UUID.749aaed806": [], "test.dmx_poc.unique_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.3f580129c1": [], "test.dmx_poc.not_null_fak_syfo_dialogmote_org_DIALOGMOTE_UUID.b624588c88": [], "test.dmx_poc.unique_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.921d124218": [], "test.dmx_poc.not_null_fak_syfo_dt_dialogmote_DIALOGMOTE_UUID.40a8d9e19a": [], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_start.8747613d8a": [], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_s_stopp.4f1075fe39": [], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_fnr.04091e79e4": [], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_gj_uforg.9046d951e1": [], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_start.b5c1d4a070": [], "test.dmx_poc.not_null_test__ssb_syfra_teller_kv_p_slutt.e95b185a90": [], "source.dmx_poc.dmx_pox_dialogmote.FK_ISDIALOGMOTE_DM2": ["model.dmx_poc.stg_fk_isdialogmote_dm2"], "source.dmx_poc.dmx_pox_oppfolging.FAK_SF_OPPFOLGING_D2_MND": [], "source.dmx_poc.dmx_pox_oppfolging.DIM_TID": ["model.dmx_poc.stg_dim_tid"], "source.dmx_poc.dmx_pox_oppfolging.DIM_ORG": ["model.dmx_poc.stg_dim_organisasjon"], "source.dmx_poc.dmx_pox_oppfolging.DIM_VARIGHET": ["model.dmx_poc.stg_dim_varighet"], "source.dmx_poc.dmx_pox_oppfolging.DIM_NAERING": ["model.dmx_poc.stg_dim_naering"], "source.dmx_poc.dmx_poc_person.DIM_PERSON1": ["model.dmx_poc.stg_dim_person1"], "source.dmx_poc.dt_person.dvh_person_ident_off_id": ["test.dmx_poc.person_ikke_kode67"], "source.dmx_poc.dvh_syfra.ssb_syfra_teller_kv": ["model.dmx_poc.test__ssb_syfra_teller_kv"]}}